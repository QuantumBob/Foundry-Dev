_renderHTML(context, options) {
    console.log(`RWK: _renderHTML - ${this.document.documentName}`);
};

addEventListener(type, listener, options) {
    console.log(`RWK: addEventListener - ${this.document.documentName}`);
};

bringToFront() {
    console.log(`RWK: bringToFront - ${this.document.documentName}`);
};

changeTab(tab, group, options) {
    console.log(`RWK: changeTab - ${this.document.documentName}`);
};

close(options) {
    console.log(`RWK: close - ${this.document.documentName}`);
};

dispatchEvent(event) {
    console.log(`RWK: dispatchEvent - ${this.document.documentName}`);
};

maximize() {
    console.log(`RWK: maximize - ${this.document.documentName}`);
};

minimize() {
    console.log(`RWK: minimize - ${this.document.documentName}`);
};

removeEventListener(type, listener) {
    console.log(`RWK: removeEventListener - ${this.document.documentName}`);
};

render(options, _options) {
    console.log(`RWK: render - ${this.document.documentName}`);
};

setPosition(position) {
    console.log(`RWK: setPosition - ${this.document.documentName}`);
};

submit(submitOptions) {
    console.log(`RWK: submit - ${this.document.documentName}`);
};

toggleControls(expanded, options) {
    console.log(`RWK: toggleControls - ${this.document.documentName}`);
};

_attachFrameListeners() {
    console.log(`RWK: _attachFrameListeners - ${this.document.documentName}`);
};

_canRender(options) {
    console.log(`RWK: _canRender - ${this.document.documentName}`);
};

_configureRenderOptions(options) {
    console.log(`RWK: _configureRenderOptions - ${this.document.documentName}`);
};

_createContextMenu(handler) {
    console.log(`RWK: _createContextMenu - ${this.document.documentName}`);
};

_getHeaderControls() {
    console.log(`RWK: _getHeaderControls - ${this.document.documentName}`);
};

_getTabsConfig(group) {
    console.log(`RWK: _getTabsConfig - ${this.document.documentName}`);
};

_headerControlButtons() {
    console.log(`RWK: _headerControlButtons - ${this.document.documentName}`);
};

_initializeApplicationOptions(options) {
    console.log(`RWK: _initializeApplicationOptions - ${this.document.documentName}`);
};

_insertElement(element) {
    console.log(`RWK: _insertElement - ${this.document.documentName}`);
};

_onChangeForm(formConfig, event) {
    console.log(`RWK: _onChangeForm - ${this.document.documentName}`);
};

_onClickAction(event, target) {
    console.log(`RWK: _onClickAction - ${this.document.documentName}`);
};

_onClickTab(event) {
    console.log(`RWK: _onClickTab - ${this.document.documentName}`);
};

_onClose(options) {
    console.log(`RWK: _onClose - ${this.document.documentName}`);
};

_onFirstRender(context, options) {
    console.log(`RWK: _onFirstRender - ${this.document.documentName}`);
};

_onPosition(position) {
    console.log(`RWK: _onPosition - ${this.document.documentName}`);
};

_onRender(context, options) {
    console.log(`RWK: _onRender - ${this.document.documentName}`);
};

_onSubmitForm(formConfig, event) {
    console.log(`RWK: _onSubmitForm - ${this.document.documentName}`);
};

_postRender(context, options) {
    console.log(`RWK: _postRender - ${this.document.documentName}`);
};

_preClose(options) {
    console.log(`RWK: _preClose - ${this.document.documentName}`);
};

_preFirstRender(context, options) {
    console.log(`RWK: _preFirstRender - ${this.document.documentName}`);
};

_prepareContext(options) {
    console.log(`RWK: _prepareContext - ${this.document.documentName}`);
};

_prepareTabs(group) {
    console.log(`RWK: _prepareTabs - ${this.document.documentName}`);
};

_prePosition(position) {
    console.log(`RWK: _prePosition - ${this.document.documentName}`);
};

_preRender(context, options) {
    console.log(`RWK: _preRender - ${this.document.documentName}`);
};

_removeElement(element) {
    console.log(`RWK: _removeElement - ${this.document.documentName}`);
};

_renderFrame(options) {
    console.log(`RWK: _renderFrame - ${this.document.documentName}`);
};

_renderHeaderControl(control) {
    console.log(`RWK: _renderHeaderControl - ${this.document.documentName}`);
};

_replaceHTML(result, content, options) {
    console.log(`RWK: _replaceHTML - ${this.document.documentName}`);
};

_tearDown(options) {
    console.log(`RWK: _tearDown - ${this.document.documentName}`);
};

_updateFrame(options) {
    console.log(`RWK: _updateFrame - ${this.document.documentName}`);
};

_updatePosition(position) {
    console.log(`RWK: _updatePosition - ${this.document.documentName}`);
};

inheritanceChain() {
    console.log(`RWK: inheritanceChain - ${this.document.documentName}`);
};

parseCSSDimension(style, parentDimension) {
    console.log(`RWK: parseCSSDimension - ${this.document.documentName}`);
};

waitForImages(element) {
    console.log(`RWK: waitForImages - ${this.document.documentName}`);
};

_onRevealSecret(event) {
    console.log(`RWK: _onRevealSecret - ${this.document.documentName}`);
};

_prepareSubmitData(event, form, formData, updateData) {
    console.log(`RWK: _prepareSubmitData - ${this.document.documentName}`);
};

_processFormData(event, form, formData) {
    console.log(`RWK: _processFormData - ${this.document.documentName}`);
};

_processSubmitData(event, form, submitData, options) {
    console.log(`RWK: _processSubmitData - ${this.document.documentName}`);
};

_toggleDisabled(disabled) {
    console.log(`RWK: _toggleDisabled - ${this.document.documentName}`);
};