clone(data, context) {
    console.log(`RWK: clone - ${this.document.documentName}`);
};

reset() {
    console.log(`RWK: reset - ${this.document.documentName}`);
};

toJSON() {
    console.log(`RWK: toJSON - ${this.document.documentName}`);
};

toObject(source) {
    console.log(`RWK: toObject - ${this.document.documentName}`);
};

updateSource(changes, options) {
    console.log(`RWK: updateSource - ${this.document.documentName}`);
};

validate(options) {
    console.log(`RWK: validate - ${this.document.documentName}`);
};

_configure(options) {
    console.log(`RWK: _configure - ${this.document.documentName}`);
};

_initialize(options) {
    console.log(`RWK: _initialize - ${this.document.documentName}`);
};

_initializeSource(data, options) {
    console.log(`RWK: _initializeSource - ${this.document.documentName}`);
};

cleanData(source, options) {
    console.log(`RWK: cleanData - ${this.document.documentName}`);
};

defineSchema() {
    console.log(`RWK: defineSchema - ${this.document.documentName}`);
};

fromJSON(json) {
    console.log(`RWK: fromJSON - ${this.document.documentName}`);
};

fromSource(source, context) {
    console.log(`RWK: fromSource - ${this.document.documentName}`);
};

migrateData(source) {
    console.log(`RWK: migrateData - ${this.document.documentName}`);
};

migrateDataSafe(source) {
    console.log(`RWK: migrateDataSafe - ${this.document.documentName}`);
};

shimData(data, options) {
    console.log(`RWK: shimData - ${this.document.documentName}`);
};

validateJoint(data) {
    console.log(`RWK: validateJoint - ${this.document.documentName}`);
};

_initializationOrder() {
    console.log(`RWK: _initializationOrder - ${this.document.documentName}`);
};

canUserModify(user, action, data) {
    console.log(`RWK: canUserModify - ${this.document.documentName}`);
};

createEmbeddedDocuments(embeddedName, data, operation) {
    console.log(`RWK: createEmbeddedDocuments - ${this.document.documentName}`);
};

delete(operation) {
    console.log(`RWK: delete - ${this.document.documentName}`);
};

deleteEmbeddedDocuments(embeddedName, ids, operation) {
    console.log(`RWK: deleteEmbeddedDocuments - ${this.document.documentName}`);
};

getEmbeddedCollection(embeddedName) {
    console.log(`RWK: getEmbeddedCollection - ${this.document.documentName}`);
};

getEmbeddedDocument(embeddedName, id, options) {
    console.log(`RWK: getEmbeddedDocument - ${this.document.documentName}`);
};

getFlag(scope, key) {
    console.log(`RWK: getFlag - ${this.document.documentName}`);
};

getUserLevel(user) {
    console.log(`RWK: getUserLevel - ${this.document.documentName}`);
};

migrateSystemData() {
    console.log(`RWK: migrateSystemData - ${this.document.documentName}`);
};

setFlag(scope, key, value) {
    console.log(`RWK: setFlag - ${this.document.documentName}`);
};

testUserPermission(user, permission, options) {
    console.log(`RWK: testUserPermission - ${this.document.documentName}`);
};

traverseEmbeddedDocuments(_parentPath) {
    console.log(`RWK: traverseEmbeddedDocuments - ${this.document.documentName}`);
};

unsetFlag(scope, key) {
    console.log(`RWK: unsetFlag - ${this.document.documentName}`);
};

update(data, operation) {
    console.log(`RWK: update - ${this.document.documentName}`);
};

updateEmbeddedDocuments(embeddedName, updates, operation) {
    console.log(`RWK: updateEmbeddedDocuments - ${this.document.documentName}`);
};

_onCreate(data, options, userId) {
    console.log(`RWK: _onCreate - ${this.document.documentName}`);
};

_onDelete(options, userId) {
    console.log(`RWK: _onDelete - ${this.document.documentName}`);
};

_onUpdate(changed, options, userId) {
    console.log(`RWK: _onUpdate - ${this.document.documentName}`);
};

_preCreate(data, options, user) {
    console.log(`RWK: _preCreate - ${this.document.documentName}`);
};

_preDelete(options, user) {
    console.log(`RWK: _preDelete - ${this.document.documentName}`);
};

_preUpdate(changes, options, user) {
    console.log(`RWK: _preUpdate - ${this.document.documentName}`);
};

canUserCreate(user) {
    console.log(`RWK: canUserCreate - ${this.document.documentName}`);
};

create(data) {
    console.log(`RWK: create - ${this.document.documentName}`);
};

createDocuments(data) {
    console.log(`RWK: createDocuments - ${this.document.documentName}`);
};

deleteDocuments(ids, operation) {
    console.log(`RWK: deleteDocuments - ${this.document.documentName}`);
};

get(documentId, operation) {
    console.log(`RWK: get - ${this.document.documentName}`);
};

getCollectionName(name) {
    console.log(`RWK: getCollectionName - ${this.document.documentName}`);
};

updateDocuments(updates, operation) {
    console.log(`RWK: updateDocuments - ${this.document.documentName}`);
};

_onCreateOperation(documents, operation, user) {
    console.log(`RWK: _onCreateOperation - ${this.document.documentName}`);
};

_onDeleteOperation(documents, operation, user) {
    console.log(`RWK: _onDeleteOperation - ${this.document.documentName}`);
};

_onUpdateOperation(documents, operation, user) {
    console.log(`RWK: _onUpdateOperation - ${this.document.documentName}`);
};

_preCreateOperation(documents, operation, user) {
    console.log(`RWK: _preCreateOperation - ${this.document.documentName}`);
};

_preDeleteOperation(documents, operation, user) {
    console.log(`RWK: _preDeleteOperation - ${this.document.documentName}`);
};

_preUpdateOperation(documents, operation, user) {
    console.log(`RWK: _preUpdateOperation - ${this.document.documentName}`);
};

getDefaultArtwork(actorData) {
    console.log(`RWK: getDefaultArtwork - ${this.document.documentName}`);
};