_renderHTML

    _renderHTML(
        context: ApplicationRenderContext,
        options: RenderOptions,
    ): Promise<any>

    Render an HTMLElement for the Application. An Application subclass must implement this method in order for the Application to be renderable.
    Parameters
        context: ApplicationRenderContext

        Context data for the render operation
        options: RenderOptions

        Options which configure application rendering behavior
    Returns Promise<any>

    The result of HTML rendering may be implementation specific. Whatever value is returned here is passed to _replaceHTML

addEventListener

    addEventListener(
        type: string,
        listener: EmittedEventListener,
        options?: { once?: boolean },
    ): void

    Add a new event listener for a certain type of event.
    Parameters
        type: string

        The type of event being registered for
        listener: EmittedEventListener

        The listener function called when the event occurs
        Optionaloptions: { once?: boolean } = {}

        Options which configure the event listener
            Optionalonce?: boolean

            Should the event only be responded to once and then removed
    Returns void
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

    Inherited from EventEmitterMixin().addEventListener

bringToFront

    bringToFront(): void

    Bring this Application window to the front of the rendering stack by increasing its z-index. Once ApplicationV1 is deprecated we should switch from _maxZ to ApplicationV2#maxZ We should also eliminate ui.activeWindow in favor of only ApplicationV2#frontApp
    Returns void

changeTab

    changeTab(
        tab: string,
        group: string,
        options?: {
            event?: Event;
            force?: boolean;
            navElement?: HTMLElement;
            updatePosition?: boolean;
        },
    ): void

    Change the active tab within a tab group in this Application instance.
    Parameters
        tab: string

        The name of the tab which should become active
        group: string

        The name of the tab group which defines the set of tabs
        Optionaloptions: {
            event?: Event;
            force?: boolean;
            navElement?: HTMLElement;
            updatePosition?: boolean;
        } = {}

        Additional options which affect tab navigation
            Optionalevent?: Event

            An interaction event which caused the tab change, if any
            Optionalforce?: boolean

            Force changing the tab even if the new tab is already active
            OptionalnavElement?: HTMLElement

            An explicit navigation element being modified
            OptionalupdatePosition?: boolean

            Update application position after changing the tab?
    Returns void

close

    close(
        options?: Partial<ApplicationClosingOptions>,
    ): Promise<ApplicationV2<Configuration, RenderOptions>>

    Close the Application, removing it from the DOM.
    Parameters
        Optionaloptions: Partial<ApplicationClosingOptions> = {}

        Options which modify how the application is closed.
    Returns Promise<ApplicationV2<Configuration, RenderOptions>>

    A Promise which resolves to the closed Application instance

dispatchEvent

    dispatchEvent(event: Event): boolean

    Dispatch an event on this target.
    Parameters
        event: Event

        The Event to dispatch
    Returns boolean

    Was default behavior for the event prevented?
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent

    Inherited from EventEmitterMixin().dispatchEvent

maximize

    maximize(): Promise<void>

    Restore the Application to its original dimensions.
    Returns Promise<void>

minimize

    minimize(): Promise<void>

    Minimize the Application, collapsing it to a minimal header.
    Returns Promise<void>

removeEventListener

    removeEventListener(type: string, listener: EmittedEventListener): void

    Remove an event listener for a certain type of event.
    Parameters
        type: string

        The type of event being removed
        listener: EmittedEventListener

        The listener function being removed
    Returns void
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener

    Inherited from EventEmitterMixin().removeEventListener

render

    render(
        options?: boolean | RenderOptions,
        _options?: RenderOptions,
    ): Promise<ApplicationV2<Configuration, RenderOptions>>

    Render the Application, creating its HTMLElement and replacing its innerHTML. Add it to the DOM if it is not currently rendered and rendering is forced. Otherwise, re-render its contents.
    Parameters
        Optionaloptions: boolean | RenderOptions = {}

        Options which configure application rendering behavior. A boolean is interpreted as the "force" option.
        Optional_options: RenderOptions = {}

        Legacy options for backwards-compatibility with the original ApplicationV1#render signature.
    Returns Promise<ApplicationV2<Configuration, RenderOptions>>

    A Promise which resolves to the rendered Application instance

setPosition

    setPosition(position?: Partial<ApplicationPosition>): void | ApplicationPosition

    Update the Application element position using provided data which is merged with the prior position.
    Parameters
        Optionalposition: Partial<ApplicationPosition>

        New Application positioning data
    Returns void | ApplicationPosition

    The updated application position

submit

    submit(submitOptions?: object): Promise<any>

    Programmatically submit an ApplicationV2 instance which implements a single top-level form.
    Parameters
        OptionalsubmitOptions: object = {}

        Arbitrary options which are supported by and provided to the configured form submission handler.
    Returns Promise<any>

    A promise that resolves to the returned result of the form submission handler, if any.

toggleControls

    toggleControls(
        expanded?: boolean,
        options?: { animate?: boolean },
    ): Promise<void>

    Toggle display of the Application controls menu. Only applicable to window Applications.
    Parameters
        Optionalexpanded: boolean

        Set the controls visibility to a specific state. Otherwise, the visible state is toggled from its current value
        Optionaloptions: { animate?: boolean } = {}

        Options to configure the toggling behavior.
            Optionalanimate?: boolean

            Animate the controls toggling.
    Returns Promise<void>

    A Promise which resolves once the control expansion animation is complete

Protected
_attachFrameListeners

    _attachFrameListeners(): void
    Protected

    Attach event listeners to the Application frame.
    Returns void

Protected
_canRender

    _canRender(options: RenderOptions): false | void
    Protected

    Test whether this Application is allowed to be rendered.
    Parameters
        options: RenderOptions

        Provided render options
    Returns false | void

    Return false to prevent rendering
    Throws

    An Error to display a warning message

Protected
_configureRenderOptions

    _configureRenderOptions(options: RenderOptions): void
    Protected

    Modify the provided options passed to a render request.
    Parameters
        options: RenderOptions

        Options which configure application rendering behavior
    Returns void

Protected
_createContextMenu

    _createContextMenu(
        handler: () => ContextMenuEntry[],
        selector: string,
        options?: {
            container?: HTMLElement;
            hookName?: string;
            parentClassHooks?: boolean;
        },
    ): null
    | ContextMenu
    Protected

    Create a ContextMenu instance used in this Application.
    Parameters
        handler: () => ContextMenuEntry[]

        A handler function that provides initial context options
        selector: string

        A CSS selector to which the ContextMenu will be bound
        Optionaloptions: { container?: HTMLElement; hookName?: string; parentClassHooks?: boolean } = {}

        Additional options which affect ContextMenu construction
            Optionalcontainer?: HTMLElement

            A parent HTMLElement which contains the selector target
            OptionalhookName?: string

            The hook name
            OptionalparentClassHooks?: boolean

            Whether to call hooks for the parent classes in the inheritance chain.
    Returns null | ContextMenu

    A created ContextMenu or null if no menu items were defined

Protected
_getHeaderControls

    _getHeaderControls(): ApplicationHeaderControlsEntry[]
    Protected

    Configure the array of header control menu options
    Returns ApplicationHeaderControlsEntry[]

Protected
_getTabsConfig

    _getTabsConfig(group: string): null | ApplicationTabsConfiguration
    Protected

    Get the configuration for a tabs group.
    Parameters
        group: string

        The ID of a tabs group
    Returns null | ApplicationTabsConfiguration

Protected
_headerControlButtons

    _headerControlButtons(): Generator<ApplicationHeaderControlsEntry, any, any>
    Protected

    Iterate over header control buttons, filtering for controls which are visible for the current client.
    Returns Generator<ApplicationHeaderControlsEntry, any, any>
    Yields

Protected
_initializeApplicationOptions

    _initializeApplicationOptions(
        options: Partial<ApplicationConfiguration>,
    ): ApplicationConfiguration
    Protected

    Initialize configuration options for the Application instance. The default behavior of this method is to intelligently merge options for each class with those of their parents.
        Array-based options are concatenated
        Inner objects are merged
        Otherwise, properties in the subclass replace those defined by a parent
    Parameters
        options: Partial<ApplicationConfiguration>

        Options provided directly to the constructor
    Returns ApplicationConfiguration

    Configured options for the application instance

Protected
_insertElement

    _insertElement(element: HTMLElement): void
    Protected

    Insert the application HTML element into the DOM. Subclasses may override this method to customize how the application is inserted.
    Parameters
        element: HTMLElement

        The element to insert
    Returns void

Protected
_onChangeForm

    _onChangeForm(formConfig: ApplicationFormConfiguration, event: Event): void
    Protected

    Handle changes to an input element within the form.
    Parameters
        formConfig: ApplicationFormConfiguration

        The form configuration for which this handler is bound
        event: Event

        An input change event within the form
    Returns void

Protected
_onClickAction

    _onClickAction(event: PointerEvent, target: HTMLElement): void
    Protected

    A generic event handler for action clicks which can be extended by subclasses. Action handlers defined in DEFAULT_OPTIONS are called first. This method is only called for actions which have no defined handler.
    Parameters
        event: PointerEvent

        The originating click event
        target: HTMLElement

        The capturing HTML element which defined a [data-action]
    Returns void

Protected
_onClickTab

    _onClickTab(event: PointerEvent): void
    Protected

    Handle click events on a tab within the Application.
    Parameters
        event: PointerEvent
    Returns void

Protected
_onClose

    _onClose(options: RenderOptions): void
    Protected

    Actions performed after closing the Application. Post-close steps are not awaited by the close process.
    Parameters
        options: RenderOptions

        Provided render options
    Returns void

Protected
_onFirstRender

    _onFirstRender(
        context: ApplicationRenderContext,
        options: RenderOptions,
    ): Promise<void>
    Protected

    Actions performed after a first render of the Application.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: RenderOptions

        Provided render options
    Returns Promise<void>

Protected
_onPosition

    _onPosition(position: ApplicationPosition): void
    Protected

    Actions performed after the Application is re-positioned.
    Parameters
        position: ApplicationPosition

        The requested application position
    Returns void

Protected
_onRender

    _onRender(
        context: ApplicationRenderContext,
        options: RenderOptions,
    ): Promise<void>
    Protected

    Actions performed after any render of the Application.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: RenderOptions

        Provided render options
    Returns Promise<void>

Protected
_onSubmitForm

    _onSubmitForm(
        formConfig: ApplicationFormConfiguration,
        event: Event | SubmitEvent,
    ): Promise<void>
    Protected

    Handle submission for an Application which uses the form element.
    Parameters
        formConfig: ApplicationFormConfiguration

        The form configuration for which this handler is bound
        event: Event | SubmitEvent

        The form submission event
    Returns Promise<void>

Protected
_postRender

    _postRender(
        context: ApplicationRenderContext,
        options: RenderOptions,
    ): Promise<void>
    Protected

    Perform post-render finalization actions.
    Parameters
        context: ApplicationRenderContext

        Prepared context data.
        options: RenderOptions

        Provided render options.
    Returns Promise<void>

Protected
_preClose

    _preClose(options: RenderOptions): Promise<void>
    Protected

    Actions performed before closing the Application. Pre-close steps are awaited by the close process.
    Parameters
        options: RenderOptions

        Provided render options
    Returns Promise<void>

Protected
_preFirstRender

    _preFirstRender(
        context: ApplicationRenderContext,
        options: RenderOptions,
    ): Promise<void>
    Protected

    Actions performed before a first render of the Application.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: RenderOptions

        Provided render options
    Returns Promise<void>

Protected
_prepareContext

    _prepareContext(options: RenderOptions): Promise<ApplicationRenderContext>
    Protected

    Prepare application rendering context data for a given render request. If exactly one tab group is configured for this application, it will be prepared automatically.
    Parameters
        options: RenderOptions

        Options which configure application rendering behavior
    Returns Promise<ApplicationRenderContext>

    Context data for the render operation

Protected
_prepareTabs

    _prepareTabs(group: string): Record<string, ApplicationTab>
    Protected

    Prepare application tab data for a single tab group.
    Parameters
        group: string

        The ID of the tab group to prepare
    Returns Record<string, ApplicationTab>

Protected
_prePosition

    _prePosition(position: ApplicationPosition): void
    Protected

    Actions performed before the Application is re-positioned. Pre-position steps are not awaited because setPosition is synchronous.
    Parameters
        position: ApplicationPosition

        The requested application position
    Returns void

Protected
_preRender

    _preRender(
        context: ApplicationRenderContext,
        options: RenderOptions,
    ): Promise<void>
    Protected

    Actions performed before any render of the Application. Pre-render steps are awaited by the render process.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: RenderOptions

        Provided render options
    Returns Promise<void>

Protected
_removeElement

    _removeElement(element: HTMLElement): void
    Protected

    Remove the application HTML element from the DOM. Subclasses may override this method to customize how the application element is removed.
    Parameters
        element: HTMLElement

        The element to be removed
    Returns void

Protected
_renderFrame

    _renderFrame(options: RenderOptions): Promise<HTMLElement>
    Protected

    Render the outer framing HTMLElement which wraps the inner HTML of the Application.
    Parameters
        options: RenderOptions

        Options which configure application rendering behavior
    Returns Promise<HTMLElement>

Protected
_renderHeaderControl

    _renderHeaderControl(control: ApplicationHeaderControlsEntry): HTMLLIElement
    Protected

    Render a header control button.
    Parameters
        control: ApplicationHeaderControlsEntry
    Returns HTMLLIElement

Protected
_replaceHTML

    _replaceHTML(result: any, content: HTMLElement, options: RenderOptions): void
    Protected

    Replace the HTML of the application with the result provided by the rendering backend. An Application subclass should implement this method in order for the Application to be renderable.
    Parameters
        result: any

        The result returned by the application rendering backend
        content: HTMLElement

        The content element into which the rendered result must be inserted
        options: RenderOptions

        Options which configure application rendering behavior
    Returns void

Protected
_tearDown

    _tearDown(options: ApplicationClosingOptions): void
    Protected

    Remove elements from the DOM and trigger garbage collection as part of application closure.
    Parameters
        options: ApplicationClosingOptions
    Returns void

Protected
_updateFrame

    _updateFrame(options: RenderOptions): void
    Protected

    When the Application is rendered, optionally update aspects of the window frame.
    Parameters
        options: RenderOptions

        Options provided at render-time
    Returns void

Protected
_updatePosition

    _updatePosition(position: ApplicationPosition): ApplicationPosition
    Protected

    Translate a requested application position updated into a resolved allowed position for the Application. Subclasses may override this method to implement more advanced positioning behavior.
    Parameters
        position: ApplicationPosition

        Requested Application positioning data
    Returns ApplicationPosition

    Resolved Application positioning data

Static
inheritanceChain

    inheritanceChain(): Generator<typeof ApplicationV2, void, unknown>

    Iterate over the inheritance chain of this Application. The chain includes this Application itself and all parents until the base application is encountered.
    Returns Generator<typeof ApplicationV2, void, unknown>
    See

    ApplicationV2.BASE_APPLICATION
    Yields

Static
parseCSSDimension

    parseCSSDimension(style: string, parentDimension: number): number | void

    Parse a CSS style rule into a number of pixels which apply to that dimension.
    Parameters
        style: string

        The CSS style rule
        parentDimension: number

        The relevant dimension of the parent element
    Returns number | void

    The parsed style dimension in pixels

Static
waitForImages

    waitForImages(element: HTMLElement): Promise<void>

    Wait for any images in the given element to load.
    Parameters
        element: HTMLElement

        The element.
    Returns Promise<void>

    _canRender

    _canRender(_options: any): void
    Parameters
        _options: any
    Returns void

    Overrides ApplicationV2._canRender

_configureRenderOptions

    _configureRenderOptions(options: any): void
    Parameters
        options: any
    Returns void
    Inherit Doc

    Overrides ApplicationV2._configureRenderOptions

_headerControlButtons

    _headerControlButtons(): Generator<
        ApplicationHeaderControlsEntry,
        void,
        unknown,
    >
    Returns Generator<ApplicationHeaderControlsEntry, void, unknown>
    Inherit Doc

    Overrides ApplicationV2._headerControlButtons

_initializeApplicationOptions

    _initializeApplicationOptions(options: any): any
    Parameters
        options: any
    Returns any
    Inherit Doc

    Overrides ApplicationV2._initializeApplicationOptions

_onChangeForm

    _onChangeForm(formConfig: any, event: any): void
    Parameters
        formConfig: any
        event: any
    Returns void
    Inherit Doc

    Overrides ApplicationV2._onChangeForm

_onClose

    _onClose(options: any): void
    Parameters
        options: any
    Returns void
    Inherit Doc

    Overrides ApplicationV2._onClose

_onFirstRender

    _onFirstRender(context: any, options: any): Promise<void>
    Parameters
        context: any
        options: any
    Returns Promise<void>
    Inherit Doc

    Overrides ApplicationV2._onFirstRender

_onRender

    _onRender(context: any, options: any): Promise<void>
    Parameters
        context: any
        options: any
    Returns Promise<void>
    Inherit Doc

    Overrides ApplicationV2._onRender

_prepareContext

    _prepareContext(
        options: any,
    ): Promise<
        ApplicationRenderContext & {
            document: ClientDocument;
            editable: boolean;
            fields: any;
            rootId: string;
            source: any;
            user: null
            | documents.User;
        },
    >
    Parameters
        options: any
    Returns Promise<
        ApplicationRenderContext & {
            document: ClientDocument;
            editable: boolean;
            fields: any;
            rootId: string;
            source: any;
            user: null
            | documents.User;
        },
    >
    Inherit Doc

    Overrides ApplicationV2._prepareContext

_renderFrame

    _renderFrame(options: any): Promise<HTMLElement>
    Parameters
        options: any
    Returns Promise<HTMLElement>
    Inherit Doc

    Overrides ApplicationV2._renderFrame

Abstract
_renderHTML

    _renderHTML(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<any>

    Render an HTMLElement for the Application. An Application subclass must implement this method in order for the Application to be renderable.
    Parameters
        context: ApplicationRenderContext

        Context data for the render operation
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Options which configure application rendering behavior
    Returns Promise<any>

    The result of HTML rendering may be implementation specific. Whatever value is returned here is passed to _replaceHTML

    Inherited from ApplicationV2._renderHTML

addEventListener

    addEventListener(
        type: string,
        listener: EmittedEventListener,
        options?: { once?: boolean },
    ): void

    Add a new event listener for a certain type of event.
    Parameters
        type: string

        The type of event being registered for
        listener: EmittedEventListener

        The listener function called when the event occurs
        Optionaloptions: { once?: boolean } = {}

        Options which configure the event listener
            Optionalonce?: boolean

            Should the event only be responded to once and then removed
    Returns void
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

    Inherited from ApplicationV2.addEventListener

bringToFront

    bringToFront(): void

    Bring this Application window to the front of the rendering stack by increasing its z-index. Once ApplicationV1 is deprecated we should switch from _maxZ to ApplicationV2#maxZ We should also eliminate ui.activeWindow in favor of only ApplicationV2#frontApp
    Returns void

    Inherited from ApplicationV2.bringToFront

changeTab

    changeTab(
        tab: string,
        group: string,
        options?: {
            event?: Event;
            force?: boolean;
            navElement?: HTMLElement;
            updatePosition?: boolean;
        },
    ): void

    Change the active tab within a tab group in this Application instance.
    Parameters
        tab: string

        The name of the tab which should become active
        group: string

        The name of the tab group which defines the set of tabs
        Optionaloptions: {
            event?: Event;
            force?: boolean;
            navElement?: HTMLElement;
            updatePosition?: boolean;
        } = {}

        Additional options which affect tab navigation
            Optionalevent?: Event

            An interaction event which caused the tab change, if any
            Optionalforce?: boolean

            Force changing the tab even if the new tab is already active
            OptionalnavElement?: HTMLElement

            An explicit navigation element being modified
            OptionalupdatePosition?: boolean

            Update application position after changing the tab?
    Returns void

    Inherited from ApplicationV2.changeTab

close

    close(options?: Partial<ApplicationClosingOptions>): Promise<DocumentSheetV2>

    Close the Application, removing it from the DOM.
    Parameters
        Optionaloptions: Partial<ApplicationClosingOptions> = {}

        Options which modify how the application is closed.
    Returns Promise<DocumentSheetV2>

    A Promise which resolves to the closed Application instance

    Inherited from ApplicationV2.close

dispatchEvent

    dispatchEvent(event: Event): boolean

    Dispatch an event on this target.
    Parameters
        event: Event

        The Event to dispatch
    Returns boolean

    Was default behavior for the event prevented?
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent

    Inherited from ApplicationV2.dispatchEvent

maximize

    maximize(): Promise<void>

    Restore the Application to its original dimensions.
    Returns Promise<void>

    Inherited from ApplicationV2.maximize

minimize

    minimize(): Promise<void>

    Minimize the Application, collapsing it to a minimal header.
    Returns Promise<void>

    Inherited from ApplicationV2.minimize

removeEventListener

    removeEventListener(type: string, listener: EmittedEventListener): void

    Remove an event listener for a certain type of event.
    Parameters
        type: string

        The type of event being removed
        listener: EmittedEventListener

        The listener function being removed
    Returns void
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener

    Inherited from ApplicationV2.removeEventListener

render

    render(
        options?:
            | boolean
            | ApplicationRenderOptions & DocumentSheetRenderOptions,
        _options?: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<DocumentSheetV2>

    Render the Application, creating its HTMLElement and replacing its innerHTML. Add it to the DOM if it is not currently rendered and rendering is forced. Otherwise, re-render its contents.
    Parameters
        Optionaloptions: boolean | ApplicationRenderOptions & DocumentSheetRenderOptions = {}

        Options which configure application rendering behavior. A boolean is interpreted as the "force" option.
        Optional_options: ApplicationRenderOptions & DocumentSheetRenderOptions = {}

        Legacy options for backwards-compatibility with the original ApplicationV1#render signature.
    Returns Promise<DocumentSheetV2>

    A Promise which resolves to the rendered Application instance

    Inherited from ApplicationV2.render

setPosition

    setPosition(position?: Partial<ApplicationPosition>): void | ApplicationPosition

    Update the Application element position using provided data which is merged with the prior position.
    Parameters
        Optionalposition: Partial<ApplicationPosition>

        New Application positioning data
    Returns void | ApplicationPosition

    The updated application position

    Inherited from ApplicationV2.setPosition

submit

    submit(submitOptions?: object): Promise<any>

    Programmatically submit an ApplicationV2 instance which implements a single top-level form.
    Parameters
        OptionalsubmitOptions: object = {}

        Arbitrary options which are supported by and provided to the configured form submission handler.
    Returns Promise<any>

    A promise that resolves to the returned result of the form submission handler, if any.

    Inherited from ApplicationV2.submit

toggleControls

    toggleControls(
        expanded?: boolean,
        options?: { animate?: boolean },
    ): Promise<void>

    Toggle display of the Application controls menu. Only applicable to window Applications.
    Parameters
        Optionalexpanded: boolean

        Set the controls visibility to a specific state. Otherwise, the visible state is toggled from its current value
        Optionaloptions: { animate?: boolean } = {}

        Options to configure the toggling behavior.
            Optionalanimate?: boolean

            Animate the controls toggling.
    Returns Promise<void>

    A Promise which resolves once the control expansion animation is complete

    Inherited from ApplicationV2.toggleControls

Protected
_attachFrameListeners

    _attachFrameListeners(): void
    Protected

    Attach event listeners to the Application frame.
    Returns void

    Inherited from ApplicationV2._attachFrameListeners

Protected
_createContextMenu

    _createContextMenu(
        handler: () => ContextMenuEntry[],
        selector: string,
        options?: {
            container?: HTMLElement;
            hookName?: string;
            parentClassHooks?: boolean;
        },
    ): null
    | ContextMenu
    Protected

    Create a ContextMenu instance used in this Application.
    Parameters
        handler: () => ContextMenuEntry[]

        A handler function that provides initial context options
        selector: string

        A CSS selector to which the ContextMenu will be bound
        Optionaloptions: { container?: HTMLElement; hookName?: string; parentClassHooks?: boolean } = {}

        Additional options which affect ContextMenu construction
            Optionalcontainer?: HTMLElement

            A parent HTMLElement which contains the selector target
            OptionalhookName?: string

            The hook name
            OptionalparentClassHooks?: boolean

            Whether to call hooks for the parent classes in the inheritance chain.
    Returns null | ContextMenu

    A created ContextMenu or null if no menu items were defined

    Inherited from ApplicationV2._createContextMenu

Protected
_getHeaderControls

    _getHeaderControls(): ApplicationHeaderControlsEntry[]
    Protected

    Configure the array of header control menu options
    Returns ApplicationHeaderControlsEntry[]

    Inherited from ApplicationV2._getHeaderControls

Protected
_getTabsConfig

    _getTabsConfig(group: string): null | ApplicationTabsConfiguration
    Protected

    Get the configuration for a tabs group.
    Parameters
        group: string

        The ID of a tabs group
    Returns null | ApplicationTabsConfiguration

    Inherited from ApplicationV2._getTabsConfig

Protected
_insertElement

    _insertElement(element: HTMLElement): void
    Protected

    Insert the application HTML element into the DOM. Subclasses may override this method to customize how the application is inserted.
    Parameters
        element: HTMLElement

        The element to insert
    Returns void

    Inherited from ApplicationV2._insertElement

Protected
_onClickAction

    _onClickAction(event: PointerEvent, target: HTMLElement): void
    Protected

    A generic event handler for action clicks which can be extended by subclasses. Action handlers defined in DEFAULT_OPTIONS are called first. This method is only called for actions which have no defined handler.
    Parameters
        event: PointerEvent

        The originating click event
        target: HTMLElement

        The capturing HTML element which defined a [data-action]
    Returns void

    Inherited from ApplicationV2._onClickAction

Protected
_onClickTab

    _onClickTab(event: PointerEvent): void
    Protected

    Handle click events on a tab within the Application.
    Parameters
        event: PointerEvent
    Returns void

    Inherited from ApplicationV2._onClickTab

Protected
_onPosition

    _onPosition(position: ApplicationPosition): void
    Protected

    Actions performed after the Application is re-positioned.
    Parameters
        position: ApplicationPosition

        The requested application position
    Returns void

    Inherited from ApplicationV2._onPosition

Protected
_onRevealSecret

    _onRevealSecret(event: Event): void
    Protected

    Handle toggling the revealed state of a secret embedded in some content.
    Parameters
        event: Event

        The triggering event.
    Returns void

Protected
_onSubmitForm

    _onSubmitForm(
        formConfig: ApplicationFormConfiguration,
        event: Event | SubmitEvent,
    ): Promise<void>
    Protected

    Handle submission for an Application which uses the form element.
    Parameters
        formConfig: ApplicationFormConfiguration

        The form configuration for which this handler is bound
        event: Event | SubmitEvent

        The form submission event
    Returns Promise<void>

    Inherited from ApplicationV2._onSubmitForm

Protected
_postRender

    _postRender(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Perform post-render finalization actions.
    Parameters
        context: ApplicationRenderContext

        Prepared context data.
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options.
    Returns Promise<void>

    Inherited from ApplicationV2._postRender

Protected
_preClose

    _preClose(
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Actions performed before closing the Application. Pre-close steps are awaited by the close process.
    Parameters
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options
    Returns Promise<void>

    Inherited from ApplicationV2._preClose

Protected
_preFirstRender

    _preFirstRender(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Actions performed before a first render of the Application.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options
    Returns Promise<void>

    Inherited from ApplicationV2._preFirstRender

Protected
_prepareSubmitData

    _prepareSubmitData(
        event: SubmitEvent,
        form: HTMLFormElement,
        formData: FormDataExtended,
        updateData?: object,
    ): object
    Protected

    Prepare data used to update the Document upon form submission. This data is cleaned and validated before being returned for further processing.
    Parameters
        event: SubmitEvent

        The originating form submission event
        form: HTMLFormElement

        The form element that was submitted
        formData: FormDataExtended

        Processed data for the submitted form
        OptionalupdateData: object

        Additional data passed in if this form is submitted manually which should be merged with prepared formData.
    Returns object

    Prepared submission data as an object
    Throws

    Subclasses may throw validation errors here to prevent form submission

Protected
_prepareTabs

    _prepareTabs(group: string): Record<string, ApplicationTab>
    Protected

    Prepare application tab data for a single tab group.
    Parameters
        group: string

        The ID of the tab group to prepare
    Returns Record<string, ApplicationTab>

    Inherited from ApplicationV2._prepareTabs

Protected
_prePosition

    _prePosition(position: ApplicationPosition): void
    Protected

    Actions performed before the Application is re-positioned. Pre-position steps are not awaited because setPosition is synchronous.
    Parameters
        position: ApplicationPosition

        The requested application position
    Returns void

    Inherited from ApplicationV2._prePosition

Protected
_preRender

    _preRender(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Actions performed before any render of the Application. Pre-render steps are awaited by the render process.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options
    Returns Promise<void>

    Inherited from ApplicationV2._preRender

Protected
_processFormData

    _processFormData(
        event: null | SubmitEvent,
        form: HTMLFormElement,
        formData: FormDataExtended,
    ): object
    Protected

    Customize how form data is extracted into an expanded object.
    Parameters
        event: null | SubmitEvent

        The originating form submission event
        form: HTMLFormElement

        The form element that was submitted
        formData: FormDataExtended

        Processed data for the submitted form
    Returns object

    An expanded object of processed form data
    Throws

    Subclasses may throw validation errors here to prevent form submission

Protected
_processSubmitData

    _processSubmitData(
        event: SubmitEvent,
        form: HTMLFormElement,
        submitData: object,
        options?: Partial<DatabaseUpdateOperation | DatabaseCreateOperation>,
    ): Promise<void>
    Protected

    Submit a document update or creation request based on the processed form data.
    Parameters
        event: SubmitEvent

        The originating form submission event
        form: HTMLFormElement

        The form element that was submitted
        submitData: object

        Processed and validated form data to be used for a document update
        Optionaloptions: Partial<DatabaseUpdateOperation | DatabaseCreateOperation> = {}

        Additional options altering the request
    Returns Promise<void>

Protected
_removeElement

    _removeElement(element: HTMLElement): void
    Protected

    Remove the application HTML element from the DOM. Subclasses may override this method to customize how the application element is removed.
    Parameters
        element: HTMLElement

        The element to be removed
    Returns void

    Inherited from ApplicationV2._removeElement

Protected
_renderHeaderControl

    _renderHeaderControl(control: ApplicationHeaderControlsEntry): HTMLLIElement
    Protected

    Render a header control button.
    Parameters
        control: ApplicationHeaderControlsEntry
    Returns HTMLLIElement

    Inherited from ApplicationV2._renderHeaderControl

Protected
_replaceHTML

    _replaceHTML(
        result: any,
        content: HTMLElement,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): void
    Protected

    Replace the HTML of the application with the result provided by the rendering backend. An Application subclass should implement this method in order for the Application to be renderable.
    Parameters
        result: any

        The result returned by the application rendering backend
        content: HTMLElement

        The content element into which the rendered result must be inserted
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Options which configure application rendering behavior
    Returns void

    Inherited from ApplicationV2._replaceHTML

Protected
_tearDown

    _tearDown(options: ApplicationClosingOptions): void
    Protected

    Remove elements from the DOM and trigger garbage collection as part of application closure.
    Parameters
        options: ApplicationClosingOptions
    Returns void

    Inherited from ApplicationV2._tearDown

Protected
_toggleDisabled

    _toggleDisabled(disabled: boolean): void
    Protected

    Disable or reenable all form fields in this application.
    Parameters
        disabled: boolean

        Should the fields be disabled?
    Returns void

Protected
_updateFrame

    _updateFrame(
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): void
    Protected

    When the Application is rendered, optionally update aspects of the window frame.
    Parameters
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Options provided at render-time
    Returns void

    Inherited from ApplicationV2._updateFrame

Protected
_updatePosition

    _updatePosition(position: ApplicationPosition): ApplicationPosition
    Protected

    Translate a requested application position updated into a resolved allowed position for the Application. Subclasses may override this method to implement more advanced positioning behavior.
    Parameters
        position: ApplicationPosition

        Requested Application positioning data
    Returns ApplicationPosition

    Resolved Application positioning data

    Inherited from ApplicationV2._updatePosition

Static
inheritanceChain

    inheritanceChain(): Generator<typeof ApplicationV2, void, unknown>

    Iterate over the inheritance chain of this Application. The chain includes this Application itself and all parents until the base application is encountered.
    Returns Generator<typeof ApplicationV2, void, unknown>
    See

    ApplicationV2.BASE_APPLICATION
    Yields

    Inherited from ApplicationV2.inheritanceChain

Static
parseCSSDimension

    parseCSSDimension(style: string, parentDimension: number): number | void

    Parse a CSS style rule into a number of pixels which apply to that dimension.
    Parameters
        style: string

        The CSS style rule
        parentDimension: number

        The relevant dimension of the parent element
    Returns number | void

    The parsed style dimension in pixels

    Inherited from ApplicationV2.parseCSSDimension

Static
waitForImages

    waitForImages(element: HTMLElement): Promise<void>

    Wait for any images in the given element to load.
    Parameters
        element: HTMLElement

        The element.
    Returns Promise<void>

    Inherited from ApplicationV2.waitForImages

    _canRender

    _canRender(_options: any): void
    Parameters
        _options: any
    Returns void

    Inherited from DocumentSheetV2._canRender

_configureRenderOptions

    _configureRenderOptions(options: any): void
    Parameters
        options: any
    Returns void
    Inherit Doc

    Inherited from DocumentSheetV2._configureRenderOptions

_getHeaderControls

    _getHeaderControls(): ApplicationHeaderControlsEntry[]
    Returns ApplicationHeaderControlsEntry[]

    Overrides DocumentSheetV2._getHeaderControls

_headerControlButtons

    _headerControlButtons(): Generator<
        ApplicationHeaderControlsEntry,
        void,
        unknown,
    >
    Returns Generator<ApplicationHeaderControlsEntry, void, unknown>
    Inherit Doc

    Inherited from DocumentSheetV2._headerControlButtons

_initializeApplicationOptions

    _initializeApplicationOptions(options: any): any
    Parameters
        options: any
    Returns any
    Inherit Doc

    Inherited from DocumentSheetV2._initializeApplicationOptions

_onChangeForm

    _onChangeForm(formConfig: any, event: any): void
    Parameters
        formConfig: any
        event: any
    Returns void
    Inherit Doc

    Inherited from DocumentSheetV2._onChangeForm

_onClose

    _onClose(options: any): void
    Parameters
        options: any
    Returns void
    Inherit Doc

    Inherited from DocumentSheetV2._onClose

_onFirstRender

    _onFirstRender(context: any, options: any): Promise<void>
    Parameters
        context: any
        options: any
    Returns Promise<void>
    Inherit Doc

    Inherited from DocumentSheetV2._onFirstRender

_onRender

    _onRender(context: any, options: any): Promise<void>
    Parameters
        context: any
        options: any
    Returns Promise<void>
    Inherit Doc

    Overrides DocumentSheetV2._onRender

_prepareContext

    _prepareContext(
        options: any,
    ): Promise<
        ApplicationRenderContext & {
            document: ClientDocument;
            editable: boolean;
            fields: any;
            rootId: string;
            source: any;
            user: null
            | documents.User;
        },
    >
    Parameters
        options: any
    Returns Promise<
        ApplicationRenderContext & {
            document: ClientDocument;
            editable: boolean;
            fields: any;
            rootId: string;
            source: any;
            user: null
            | documents.User;
        },
    >
    Inherit Doc

    Inherited from DocumentSheetV2._prepareContext

_renderFrame

    _renderFrame(options: any): Promise<HTMLElement>
    Parameters
        options: any
    Returns Promise<HTMLElement>
    Inherit Doc

    Inherited from DocumentSheetV2._renderFrame

Abstract
_renderHTML

    _renderHTML(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<any>

    Render an HTMLElement for the Application. An Application subclass must implement this method in order for the Application to be renderable.
    Parameters
        context: ApplicationRenderContext

        Context data for the render operation
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Options which configure application rendering behavior
    Returns Promise<any>

    The result of HTML rendering may be implementation specific. Whatever value is returned here is passed to _replaceHTML

    Inherited from DocumentSheetV2._renderHTML

addEventListener

    addEventListener(
        type: string,
        listener: EmittedEventListener,
        options?: { once?: boolean },
    ): void

    Add a new event listener for a certain type of event.
    Parameters
        type: string

        The type of event being registered for
        listener: EmittedEventListener

        The listener function called when the event occurs
        Optionaloptions: { once?: boolean } = {}

        Options which configure the event listener
            Optionalonce?: boolean

            Should the event only be responded to once and then removed
    Returns void
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener

    Inherited from DocumentSheetV2.addEventListener

bringToFront

    bringToFront(): void

    Bring this Application window to the front of the rendering stack by increasing its z-index. Once ApplicationV1 is deprecated we should switch from _maxZ to ApplicationV2#maxZ We should also eliminate ui.activeWindow in favor of only ApplicationV2#frontApp
    Returns void

    Inherited from DocumentSheetV2.bringToFront

changeTab

    changeTab(
        tab: string,
        group: string,
        options?: {
            event?: Event;
            force?: boolean;
            navElement?: HTMLElement;
            updatePosition?: boolean;
        },
    ): void

    Change the active tab within a tab group in this Application instance.
    Parameters
        tab: string

        The name of the tab which should become active
        group: string

        The name of the tab group which defines the set of tabs
        Optionaloptions: {
            event?: Event;
            force?: boolean;
            navElement?: HTMLElement;
            updatePosition?: boolean;
        } = {}

        Additional options which affect tab navigation
            Optionalevent?: Event

            An interaction event which caused the tab change, if any
            Optionalforce?: boolean

            Force changing the tab even if the new tab is already active
            OptionalnavElement?: HTMLElement

            An explicit navigation element being modified
            OptionalupdatePosition?: boolean

            Update application position after changing the tab?
    Returns void

    Inherited from DocumentSheetV2.changeTab

close

    close(options?: Partial<ApplicationClosingOptions>): Promise<ActorSheetV2>

    Close the Application, removing it from the DOM.
    Parameters
        Optionaloptions: Partial<ApplicationClosingOptions> = {}

        Options which modify how the application is closed.
    Returns Promise<ActorSheetV2>

    A Promise which resolves to the closed Application instance

    Inherited from DocumentSheetV2.close

dispatchEvent

    dispatchEvent(event: Event): boolean

    Dispatch an event on this target.
    Parameters
        event: Event

        The Event to dispatch
    Returns boolean

    Was default behavior for the event prevented?
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/dispatchEvent

    Inherited from DocumentSheetV2.dispatchEvent

maximize

    maximize(): Promise<void>

    Restore the Application to its original dimensions.
    Returns Promise<void>

    Inherited from DocumentSheetV2.maximize

minimize

    minimize(): Promise<void>

    Minimize the Application, collapsing it to a minimal header.
    Returns Promise<void>

    Inherited from DocumentSheetV2.minimize

removeEventListener

    removeEventListener(type: string, listener: EmittedEventListener): void

    Remove an event listener for a certain type of event.
    Parameters
        type: string

        The type of event being removed
        listener: EmittedEventListener

        The listener function being removed
    Returns void
    See

    https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener

    Inherited from DocumentSheetV2.removeEventListener

render

    render(
        options?:
            | boolean
            | ApplicationRenderOptions & DocumentSheetRenderOptions,
        _options?: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<ActorSheetV2>

    Render the Application, creating its HTMLElement and replacing its innerHTML. Add it to the DOM if it is not currently rendered and rendering is forced. Otherwise, re-render its contents.
    Parameters
        Optionaloptions: boolean | ApplicationRenderOptions & DocumentSheetRenderOptions = {}

        Options which configure application rendering behavior. A boolean is interpreted as the "force" option.
        Optional_options: ApplicationRenderOptions & DocumentSheetRenderOptions = {}

        Legacy options for backwards-compatibility with the original ApplicationV1#render signature.
    Returns Promise<ActorSheetV2>

    A Promise which resolves to the rendered Application instance

    Inherited from DocumentSheetV2.render

setPosition

    setPosition(position?: Partial<ApplicationPosition>): void | ApplicationPosition

    Update the Application element position using provided data which is merged with the prior position.
    Parameters
        Optionalposition: Partial<ApplicationPosition>

        New Application positioning data
    Returns void | ApplicationPosition

    The updated application position

    Inherited from DocumentSheetV2.setPosition

submit

    submit(submitOptions?: object): Promise<any>

    Programmatically submit an ApplicationV2 instance which implements a single top-level form.
    Parameters
        OptionalsubmitOptions: object = {}

        Arbitrary options which are supported by and provided to the configured form submission handler.
    Returns Promise<any>

    A promise that resolves to the returned result of the form submission handler, if any.

    Inherited from DocumentSheetV2.submit

toggleControls

    toggleControls(
        expanded?: boolean,
        options?: { animate?: boolean },
    ): Promise<void>

    Toggle display of the Application controls menu. Only applicable to window Applications.
    Parameters
        Optionalexpanded: boolean

        Set the controls visibility to a specific state. Otherwise, the visible state is toggled from its current value
        Optionaloptions: { animate?: boolean } = {}

        Options to configure the toggling behavior.
            Optionalanimate?: boolean

            Animate the controls toggling.
    Returns Promise<void>

    A Promise which resolves once the control expansion animation is complete

    Inherited from DocumentSheetV2.toggleControls

Protected
_attachFrameListeners

    _attachFrameListeners(): void
    Protected

    Attach event listeners to the Application frame.
    Returns void

    Inherited from DocumentSheetV2._attachFrameListeners

Protected
_canDragDrop

    _canDragDrop(selector: string): boolean
    Protected

    Define whether a user is able to conclude a drag-and-drop workflow for a given drop selector.
    Parameters
        selector: string

        The candidate HTML selector for the drop target
    Returns boolean

    Can the current user drop on this selector?

Protected
_canDragStart

    _canDragStart(selector: string): boolean
    Protected

    Define whether a user is able to begin a dragstart workflow for a given drag selector.
    Parameters
        selector: string

        The candidate HTML selector for dragging
    Returns boolean

    Can the current user drag this selector?

Protected
_createContextMenu

    _createContextMenu(
        handler: () => ContextMenuEntry[],
        selector: string,
        options?: {
            container?: HTMLElement;
            hookName?: string;
            parentClassHooks?: boolean;
        },
    ): null
    | ContextMenu
    Protected

    Create a ContextMenu instance used in this Application.
    Parameters
        handler: () => ContextMenuEntry[]

        A handler function that provides initial context options
        selector: string

        A CSS selector to which the ContextMenu will be bound
        Optionaloptions: { container?: HTMLElement; hookName?: string; parentClassHooks?: boolean } = {}

        Additional options which affect ContextMenu construction
            Optionalcontainer?: HTMLElement

            A parent HTMLElement which contains the selector target
            OptionalhookName?: string

            The hook name
            OptionalparentClassHooks?: boolean

            Whether to call hooks for the parent classes in the inheritance chain.
    Returns null | ContextMenu

    A created ContextMenu or null if no menu items were defined

    Inherited from DocumentSheetV2._createContextMenu

Protected
_getTabsConfig

    _getTabsConfig(group: string): null | ApplicationTabsConfiguration
    Protected

    Get the configuration for a tabs group.
    Parameters
        group: string

        The ID of a tabs group
    Returns null | ApplicationTabsConfiguration

    Inherited from DocumentSheetV2._getTabsConfig

Protected
_insertElement

    _insertElement(element: HTMLElement): void
    Protected

    Insert the application HTML element into the DOM. Subclasses may override this method to customize how the application is inserted.
    Parameters
        element: HTMLElement

        The element to insert
    Returns void

    Inherited from DocumentSheetV2._insertElement

Protected
_onClickAction

    _onClickAction(event: PointerEvent, target: HTMLElement): void
    Protected

    A generic event handler for action clicks which can be extended by subclasses. Action handlers defined in DEFAULT_OPTIONS are called first. This method is only called for actions which have no defined handler.
    Parameters
        event: PointerEvent

        The originating click event
        target: HTMLElement

        The capturing HTML element which defined a [data-action]
    Returns void

    Inherited from DocumentSheetV2._onClickAction

Protected
_onClickTab

    _onClickTab(event: PointerEvent): void
    Protected

    Handle click events on a tab within the Application.
    Parameters
        event: PointerEvent
    Returns void

    Inherited from DocumentSheetV2._onClickTab

Protected
_onDragOver

    _onDragOver(event: DragEvent): void
    Protected

    An event that occurs when a drag workflow moves over a drop target.
    Parameters
        event: DragEvent
    Returns void

Protected
_onDragStart

    _onDragStart(event: DragEvent): Promise<void>
    Protected

    An event that occurs when a drag workflow begins for a draggable item on the sheet.
    Parameters
        event: DragEvent

        The initiating drag start event
    Returns Promise<void>

Protected
_onDrop

    _onDrop(event: DragEvent): Promise<void>
    Protected

    An event that occurs when data is dropped into a drop target.
    Parameters
        event: DragEvent
    Returns Promise<void>

Protected
_onDropActiveEffect

    _onDropActiveEffect(
        event: DragEvent,
        effect: documents.ActiveEffect,
    ): Promise<undefined | null | documents.ActiveEffect>
    Protected

    Handle a dropped Active Effect on the Actor Sheet. The default implementation creates an Active Effect embedded document on the Actor.
    Parameters
        event: DragEvent

        The initiating drop event
        effect: documents.ActiveEffect

        The dropped ActiveEffect document
    Returns Promise<undefined | null | documents.ActiveEffect>

    A Promise resolving to a newly created ActiveEffect, if one was created, or otherwise a nullish value

Protected
_onDropActor

    _onDropActor(
        event: DragEvent,
        actor: documents.Actor,
    ): Promise<undefined | null | documents.Actor>
    Protected

    Handle a dropped Actor on the Actor Sheet.
    Parameters
        event: DragEvent

        The initiating drop event
        actor: documents.Actor

        The dropped Actor document
    Returns Promise<undefined | null | documents.Actor>

    A Promise resolving to an Actor identical or related to the dropped Actor to indicate success, or a nullish value to indicate failure or no action being taken

Protected
_onDropDocument

    _onDropDocument<TDocument extends Document>(
        event: DragEvent,
        document: TDocument,
    ): Promise<null | TDocument>
    Protected

    Handle a dropped document on the ActorSheet
    Type Parameters
        TDocument extends Document
    Parameters
        event: DragEvent

        The initiating drop event
        document: TDocument

        The resolved Document class
    Returns Promise<null | TDocument>

    A Document of the same type as the dropped one in case of a successful result, or null in case of failure or no action being taken

Protected
_onDropFolder

    _onDropFolder(
        event: DragEvent,
        folder: documents.Folder,
    ): Promise<undefined | null | documents.Folder>
    Protected

    Handle a dropped Folder on the Actor Sheet.
    Parameters
        event: DragEvent

        The initiating drop event
        folder: documents.Folder

        The dropped Folder document
    Returns Promise<undefined | null | documents.Folder>

    A Promise resolving to the dropped Folder indicate success, or a nullish value to indicate failure or no action being taken

Protected
_onDropItem

    _onDropItem(
        event: DragEvent,
        item: documents.Item,
    ): Promise<undefined | null | documents.Item>
    Protected

    Handle a dropped Item on the Actor Sheet.
    Parameters
        event: DragEvent

        The initiating drop event
        item: documents.Item

        The dropped Item document
    Returns Promise<undefined | null | documents.Item>

    A Promise resolving to the dropped Item (if sorting), a newly created Item, or a nullish value in case of failure or no action being taken

Protected
_onPosition

    _onPosition(position: ApplicationPosition): void
    Protected

    Actions performed after the Application is re-positioned.
    Parameters
        position: ApplicationPosition

        The requested application position
    Returns void

    Inherited from DocumentSheetV2._onPosition

Protected
_onRevealSecret

    _onRevealSecret(event: Event): void
    Protected

    Handle toggling the revealed state of a secret embedded in some content.
    Parameters
        event: Event

        The triggering event.
    Returns void

    Inherited from DocumentSheetV2._onRevealSecret

Protected
_onSortItem

    _onSortItem(
        event: DragEvent,
        item: documents.Item,
    ): void | Promise<documents.Item[]>
    Protected

    Handle a drop event for an existing embedded Item to sort that Item relative to its siblings.
    Parameters
        event: DragEvent

        The initiating drop event
        item: documents.Item

        The dropped Item document
    Returns void | Promise<documents.Item[]>

Protected
_onSubmitForm

    _onSubmitForm(
        formConfig: ApplicationFormConfiguration,
        event: Event | SubmitEvent,
    ): Promise<void>
    Protected

    Handle submission for an Application which uses the form element.
    Parameters
        formConfig: ApplicationFormConfiguration

        The form configuration for which this handler is bound
        event: Event | SubmitEvent

        The form submission event
    Returns Promise<void>

    Inherited from DocumentSheetV2._onSubmitForm

Protected
_postRender

    _postRender(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Perform post-render finalization actions.
    Parameters
        context: ApplicationRenderContext

        Prepared context data.
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options.
    Returns Promise<void>

    Inherited from DocumentSheetV2._postRender

Protected
_preClose

    _preClose(
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Actions performed before closing the Application. Pre-close steps are awaited by the close process.
    Parameters
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options
    Returns Promise<void>

    Inherited from DocumentSheetV2._preClose

Protected
_preFirstRender

    _preFirstRender(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Actions performed before a first render of the Application.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options
    Returns Promise<void>

    Inherited from DocumentSheetV2._preFirstRender

Protected
_prepareSubmitData

    _prepareSubmitData(
        event: SubmitEvent,
        form: HTMLFormElement,
        formData: FormDataExtended,
        updateData?: object,
    ): object
    Protected

    Prepare data used to update the Document upon form submission. This data is cleaned and validated before being returned for further processing.
    Parameters
        event: SubmitEvent

        The originating form submission event
        form: HTMLFormElement

        The form element that was submitted
        formData: FormDataExtended

        Processed data for the submitted form
        OptionalupdateData: object

        Additional data passed in if this form is submitted manually which should be merged with prepared formData.
    Returns object

    Prepared submission data as an object
    Throws

    Subclasses may throw validation errors here to prevent form submission

    Inherited from DocumentSheetV2._prepareSubmitData

Protected
_prepareTabs

    _prepareTabs(group: string): Record<string, ApplicationTab>
    Protected

    Prepare application tab data for a single tab group.
    Parameters
        group: string

        The ID of the tab group to prepare
    Returns Record<string, ApplicationTab>

    Inherited from DocumentSheetV2._prepareTabs

Protected
_prePosition

    _prePosition(position: ApplicationPosition): void
    Protected

    Actions performed before the Application is re-positioned. Pre-position steps are not awaited because setPosition is synchronous.
    Parameters
        position: ApplicationPosition

        The requested application position
    Returns void

    Inherited from DocumentSheetV2._prePosition

Protected
_preRender

    _preRender(
        context: ApplicationRenderContext,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): Promise<void>
    Protected

    Actions performed before any render of the Application. Pre-render steps are awaited by the render process.
    Parameters
        context: ApplicationRenderContext

        Prepared context data
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Provided render options
    Returns Promise<void>

    Inherited from DocumentSheetV2._preRender

Protected
_processFormData

    _processFormData(
        event: null | SubmitEvent,
        form: HTMLFormElement,
        formData: FormDataExtended,
    ): object
    Protected

    Customize how form data is extracted into an expanded object.
    Parameters
        event: null | SubmitEvent

        The originating form submission event
        form: HTMLFormElement

        The form element that was submitted
        formData: FormDataExtended

        Processed data for the submitted form
    Returns object

    An expanded object of processed form data
    Throws

    Subclasses may throw validation errors here to prevent form submission

    Inherited from DocumentSheetV2._processFormData

Protected
_processSubmitData

    _processSubmitData(
        event: SubmitEvent,
        form: HTMLFormElement,
        submitData: object,
        options?: Partial<DatabaseUpdateOperation | DatabaseCreateOperation>,
    ): Promise<void>
    Protected

    Submit a document update or creation request based on the processed form data.
    Parameters
        event: SubmitEvent

        The originating form submission event
        form: HTMLFormElement

        The form element that was submitted
        submitData: object

        Processed and validated form data to be used for a document update
        Optionaloptions: Partial<DatabaseUpdateOperation | DatabaseCreateOperation> = {}

        Additional options altering the request
    Returns Promise<void>

    Inherited from DocumentSheetV2._processSubmitData

Protected
_removeElement

    _removeElement(element: HTMLElement): void
    Protected

    Remove the application HTML element from the DOM. Subclasses may override this method to customize how the application element is removed.
    Parameters
        element: HTMLElement

        The element to be removed
    Returns void

    Inherited from DocumentSheetV2._removeElement

Protected
_renderHeaderControl

    _renderHeaderControl(control: ApplicationHeaderControlsEntry): HTMLLIElement
    Protected

    Render a header control button.
    Parameters
        control: ApplicationHeaderControlsEntry
    Returns HTMLLIElement

    Inherited from DocumentSheetV2._renderHeaderControl

Protected
_replaceHTML

    _replaceHTML(
        result: any,
        content: HTMLElement,
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): void
    Protected

    Replace the HTML of the application with the result provided by the rendering backend. An Application subclass should implement this method in order for the Application to be renderable.
    Parameters
        result: any

        The result returned by the application rendering backend
        content: HTMLElement

        The content element into which the rendered result must be inserted
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Options which configure application rendering behavior
    Returns void

    Inherited from DocumentSheetV2._replaceHTML

Protected
_tearDown

    _tearDown(options: ApplicationClosingOptions): void
    Protected

    Remove elements from the DOM and trigger garbage collection as part of application closure.
    Parameters
        options: ApplicationClosingOptions
    Returns void

    Inherited from DocumentSheetV2._tearDown

Protected
_toggleDisabled

    _toggleDisabled(disabled: boolean): void
    Protected

    Disable or reenable all form fields in this application.
    Parameters
        disabled: boolean

        Should the fields be disabled?
    Returns void

    Inherited from DocumentSheetV2._toggleDisabled

Protected
_updateFrame

    _updateFrame(
        options: ApplicationRenderOptions & DocumentSheetRenderOptions,
    ): void
    Protected

    When the Application is rendered, optionally update aspects of the window frame.
    Parameters
        options: ApplicationRenderOptions & DocumentSheetRenderOptions

        Options provided at render-time
    Returns void

    Inherited from DocumentSheetV2._updateFrame

Protected
_updatePosition

    _updatePosition(position: ApplicationPosition): ApplicationPosition
    Protected

    Translate a requested application position updated into a resolved allowed position for the Application. Subclasses may override this method to implement more advanced positioning behavior.
    Parameters
        position: ApplicationPosition

        Requested Application positioning data
    Returns ApplicationPosition

    Resolved Application positioning data

    Inherited from DocumentSheetV2._updatePosition

Static
inheritanceChain

    inheritanceChain(): Generator<typeof ApplicationV2, void, unknown>

    Iterate over the inheritance chain of this Application. The chain includes this Application itself and all parents until the base application is encountered.
    Returns Generator<typeof ApplicationV2, void, unknown>
    See

    ApplicationV2.BASE_APPLICATION
    Yields

    Inherited from DocumentSheetV2.inheritanceChain

Static
parseCSSDimension

    parseCSSDimension(style: string, parentDimension: number): number | void

    Parse a CSS style rule into a number of pixels which apply to that dimension.
    Parameters
        style: string

        The CSS style rule
        parentDimension: number

        The relevant dimension of the parent element
    Returns number | void

    The parsed style dimension in pixels

    Inherited from DocumentSheetV2.parseCSSDimension

Static
waitForImages

    waitForImages(element: HTMLElement): Promise<void>

    Wait for any images in the given element to load.
    Parameters
        element: HTMLElement

        The element.
    Returns Promise<void>

    Inherited from DocumentSheetV2.waitForImages