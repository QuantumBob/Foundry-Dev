clone(data, context) {
    console.log(`RWK: ${this.document.documentName}`);
};

reset() {
    console.log(`RWK: ${this.document.documentName}`);
};

toJSON() {
    console.log(`RWK: ${this.document.documentName}`);
};

toObject(source) {
    console.log(`RWK: ${this.document.documentName}`);
};

updateSource(changes, options) {
    console.log(`RWK: ${this.document.documentName}`);
};

validate(options) {
    console.log(`RWK: ${this.document.documentName}`);
};

_configure(options) {
    console.log(`RWK: ${this.document.documentName}`);
};

_initialize(options) {
    console.log(`RWK: ${this.document.documentName}`);
};

_initializeSource(data, options) {
    console.log(`RWK: ${this.document.documentName}`);
};

cleanData(source, options) {
    console.log(`RWK: ${this.document.documentName}`);
};

defineSchema() {
    console.log(`RWK: ${this.document.documentName}`);
};

fromJSON(json) {
    console.log(`RWK: ${this.document.documentName}`);
};

fromSource(source, context) {
    console.log(`RWK: ${this.document.documentName}`);
};

migrateData(source) {
    console.log(`RWK: ${this.document.documentName}`);
};

migrateDataSafe(source) {
    console.log(`RWK: ${this.document.documentName}`);
};

shimData(data, options) {
    console.log(`RWK: ${this.document.documentName}`);
};

validateJoint(data) {
    console.log(`RWK: ${this.document.documentName}`);
};

_initializationOrder() {
    console.log(`RWK: ${this.document.documentName}`);
};

canUserModify(user, action, data) {
    console.log(`RWK: ${this.document.documentName}`);
};

createEmbeddedDocuments(embeddedName, data, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

delete(operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

deleteEmbeddedDocuments(embeddedName, ids, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

getEmbeddedCollection(embeddedName) {
    console.log(`RWK: ${this.document.documentName}`);
};

getEmbeddedDocument(embeddedName, id, options) {
    console.log(`RWK: ${this.document.documentName}`);
};

getFlag(scope, key) {
    console.log(`RWK: ${this.document.documentName}`);
};

getUserLevel(user) {
    console.log(`RWK: ${this.document.documentName}`);
};

migrateSystemData() {
    console.log(`RWK: ${this.document.documentName}`);
};

setFlag(scope, key, value) {
    console.log(`RWK: ${this.document.documentName}`);
};

testUserPermission(user, permission, options) {
    console.log(`RWK: ${this.document.documentName}`);
};

traverseEmbeddedDocuments(_parentPath) {
    console.log(`RWK: ${this.document.documentName}`);
};

unsetFlag(scope, key) {
    console.log(`RWK: ${this.document.documentName}`);
};

update(data, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

updateEmbeddedDocuments(embeddedName, updates, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

_onCreate(data, options, userId) {
    console.log(`RWK: ${this.document.documentName}`);
};

_onDelete(options, userId) {
    console.log(`RWK: ${this.document.documentName}`);
};

_onUpdate(changed, options, userId) {
    console.log(`RWK: ${this.document.documentName}`);
};

_preCreate(data, options, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_preDelete(options, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_preUpdate(changes, options, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

canUserCreate(user) {
    console.log(`RWK: ${this.document.documentName}`);
};

create(data) {
    console.log(`RWK: ${this.document.documentName}`);
};

createDocuments(data) {
    console.log(`RWK: ${this.document.documentName}`);
};

deleteDocuments(ids, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

get(documentId, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

getCollectionName(name) {
    console.log(`RWK: ${this.document.documentName}`);
};

updateDocuments(updates, operation) {
    console.log(`RWK: ${this.document.documentName}`);
};

_onCreateOperation(documents, operation, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_onDeleteOperation(documents, operation, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_onUpdateOperation(documents, operation, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_preCreateOperation(documents, operation, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_preDeleteOperation(documents, operation, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

_preUpdateOperation(documents, operation, user) {
    console.log(`RWK: ${this.document.documentName}`);
};

getDefaultArtwork(actorData) {
    console.log(`RWK: ${this.document.documentName}`);
};