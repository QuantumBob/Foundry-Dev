clone

    clone(
        data?: object,
        context?: DataModelConstructionContext,
    ):
        | DataModel<object, DataModelConstructionContext>
        | Promise<DataModel<object, DataModelConstructionContext>>

    Clone a model, creating a new data model by combining current data with provided overrides.
    Parameters
        Optionaldata: object = {}

        Additional data which overrides current document data at the time of creation
        Optionalcontext: DataModelConstructionContext = {}

        Context options passed to the data model constructor
    Returns
        | DataModel<object, DataModelConstructionContext>
        | Promise<DataModel<object, DataModelConstructionContext>>

    The cloned instance

reset

    reset(): void

    Reset the state of this data instance back to mirror the contained source data, erasing any changes.
    Returns void

toJSON

    toJSON(): object

    Extract the source data for the DataModel into a simple object format that can be serialized.
    Returns object

    The document source data expressed as a plain object

toObject

    toObject(source?: boolean): object

    Copy and transform the DataModel into a plain object. Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
    Parameters
        Optionalsource: boolean = true

        Draw values from the underlying data source rather than transformed values
    Returns object

    The extracted primitive object

updateSource

    updateSource(changes?: object, options?: DataModelUpdateOptions): object

    Update the DataModel locally by applying an object of changes to its source data. The provided changes are expanded, cleaned, validated, and stored to the source data object for this model. The provided changes argument is mutated in this process. The source data is then re-initialized to apply those changes to the prepared data. The method returns an object of differential changes which modified the original data.
    Parameters
        changes: object = {}

        New values which should be applied to the data model
        options: DataModelUpdateOptions = {}

        Options which determine how the new data is merged
    Returns object

    An object containing differential keys and values that were changed
    Throws

    An error if the requested data model changes were invalid

validate

    validate(options?: DataModelValidationOptions): boolean

    Validate the data contained in the document to check for type and content. If changes are provided, missing types are added to it before cleaning and validation. This mutates the provided changes. This function throws an error if data within the document is not valid.
    Parameters
        options: DataModelValidationOptions = {}

        Options which modify how the model is validated
    Returns boolean

    Whether the data source or proposed change is reported as valid. A boolean is always returned if validation is non-strict.
    Throws

    An error thrown if validation is strict and a failure occurs.

Protected
_configure

    _configure(options?: object): void
    Protected

    Configure the data model instance before validation and initialization workflows are performed.
    Parameters
        Optionaloptions: object = {}

        Additional options modifying the configuration
    Returns void

Protected
_initialize

    _initialize(options?: object): void
    Protected

    Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
    Parameters
        Optionaloptions: object = {}

        Options provided to the model constructor
    Returns void

Protected
_initializeSource

    _initializeSource(
        data: object | DataModel<object, DataModelConstructionContext>,
        options?: object,
    ): object
    Protected

    Initialize the source data for a new DataModel instance. One-time migrations and initial cleaning operations are applied to the source data.
    Parameters
        data: object | DataModel<object, DataModelConstructionContext>

        The candidate source data from which the model will be constructed
        Optionaloptions: object = {}

        Options provided to the model constructor
    Returns object

    Migrated and cleaned source data which will be stored to the model instance, which is the same object as the data argument

Static
cleanData

    cleanData(source?: object, options?: object): object

    Clean a data source object to conform to a specific provided schema.
    Parameters
        Optionalsource: object = {}

        The source data object
        Optionaloptions: object = {}

        Additional options which are passed to field cleaning methods
    Returns object

    The cleaned source data, which is the same object as the source argument

Static
Abstract
defineSchema

    defineSchema(): DataSchema

    Define the data schema for models of this type. The schema is populated the first time it is accessed and cached for future reuse.

    The schema, through its fields, provide the essential cleaning, validation, and initialization methods to turn the _source values into direct properties of the data model. The schema is a static property of the model and is reused by all instances to perform validation.

    The schemas defined by the core software in classes like foundry.documents.BaseActor are validated by the server, where user code does not run. However, almost all documents have a flags field to store data, and many have a system field that can be configured to be a foundry.abstract.TypeDataModel instance. Those models are not constructed on the server and rely purely on client-side code, which means certain extra-sensitive fields must be also be registered through your package manifest. foundry.packages.types.ServerSanitizationFields
    Returns DataSchema
    Example

    class SomeModel extends foundry.abstract.DataModel {
      static defineSchema() {
        return {
          foo: new foundry.data.fields.StringField()
        }
      }
    }

    class AnotherModel extends SomeModel {
      static defineSchema() {
        // Inheritance and object oriented principles apply to schema definition
        const schema = super.defineSchema()

        schema.bar = new foundry.data.fields.NumberField()

        return schema;
      }
    }

Static
fromJSON

    fromJSON(json: string): DataModel<object, DataModelConstructionContext>

    Create a DataModel instance using a provided serialized JSON string.
    Parameters
        json: string

        Serialized document data in string format
    Returns DataModel<object, DataModelConstructionContext>

    A constructed data model instance

Static
fromSource

    fromSource(
        source: object,
        context?: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions,
    ): DataModel<object, DataModelConstructionContext>

    Create a new instance of this DataModel from a source record. The source is presumed to be trustworthy and is not strictly validated.
    Parameters
        source: object

        Initial document data which comes from a trusted source.
        Optionalcontext: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions = {}

        Model construction context
    Returns DataModel<object, DataModelConstructionContext>

Static
migrateData

    migrateData(source: object): object

    Migrate candidate source data for this DataModel which may require initial cleaning or transformations.
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

Static
migrateDataSafe

    migrateDataSafe(source: object): object

    Wrap data migration in a try/catch which attempts it safely
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

Static
shimData

    shimData(data: object, options?: { embedded?: boolean }): object

    Take data which conforms to the current data schema and add backwards-compatible accessors to it in order to support older code which uses this data.
    Parameters
        data: object

        Data which matches the current schema
        Optionaloptions: { embedded?: boolean } = {}

        Additional shimming options
            Optionalembedded?: boolean

            Apply shims to embedded models?
    Returns object

    Data with added backwards-compatible properties, which is the same object as the data argument

Static
validateJoint

    validateJoint(data: object): void

    Evaluate joint validation rules which apply validation conditions across multiple fields of the model. Field-specific validation rules should be defined as part of the DataSchema for the model. This method allows for testing aggregate rules which impose requirements on the overall model.
    Parameters
        data: object

        Candidate data for the model
    Returns void
    Throws

    An error if a validation failure is detected

Protected
Static
_initializationOrder

    _initializationOrder(): Generator<[string, DataField], any, any>
    Protected

    A generator that orders the DataFields in the DataSchema into an expected initialization order.
    Returns Generator<[string, DataField], any, any>
    Yields

_configure

    _configure(__namedParameters?: { pack?: null; parentCollection?: null }): void
    Parameters
        __namedParameters: { pack?: null; parentCollection?: null } = {}
    Returns void

    Overrides DataModel._configure

canUserModify

    canUserModify(user: BaseUser, action: string, data?: object): boolean

    Test whether a given User has permission to perform some action on this Document
    Parameters
        user: BaseUser

        The User attempting modification
        action: string

        The attempted action
        Optionaldata: object = {}

        Data involved in the attempted action
    Returns boolean

    Does the User have permission?

clone

    clone(
        data?: object,
        context?: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions,
    ):
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    Clone a document, creating a new document by combining current data with provided overrides. The cloned document is ephemeral and not yet saved to the database.
    Parameters
        Optionaldata: object = {}

        Additional data which overrides current document data at the time of creation
        Optionalcontext: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions = {}

        Additional context options passed to the create method
    Returns
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    The cloned Document instance

    Overrides DataModel.clone

createEmbeddedDocuments

    createEmbeddedDocuments(
        embeddedName: string,
        data?: object[],
        operation?: DatabaseCreateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple embedded Document instances within this parent Document using provided input data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        data: object[] = []

        An array of data objects used to create multiple documents
        Optionaloperation: DatabaseCreateOperation = {}

        Parameters of the database creation workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    See

    Document.createDocuments

delete

    delete(
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Delete this Document, removing it from the database.
    Parameters
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the deletion operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The deleted Document instance, or undefined if not deleted
    See

    Document.deleteDocuments

deleteEmbeddedDocuments

    deleteEmbeddedDocuments(
        embeddedName: string,
        ids: string[],
        operation?: DatabaseDeleteOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete multiple embedded Document instances within a parent Document using provided string ids.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        ids: string[]

        An array of string ids for each Document to be deleted
        Optionaloperation: DatabaseDeleteOperation = {}

        Parameters of the database deletion workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    See

    Document.deleteDocuments

getEmbeddedCollection

    getEmbeddedCollection(embeddedName: string): DocumentCollection

    Obtain a reference to the Array of source data within the data object for a certain embedded Document name
    Parameters
        embeddedName: string

        The name of the embedded Document type
    Returns DocumentCollection

    The Collection instance of embedded Documents of the requested type

getEmbeddedDocument

    getEmbeddedDocument(
        embeddedName: string,
        id: string,
        options?: { invalid?: boolean; strict?: boolean },
    ): Document<object, DocumentConstructionContext>

    Get an embedded document by its id from a named collection in the parent document.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        id: string

        The id of the child document to retrieve
        Optionaloptions: { invalid?: boolean; strict?: boolean } = {}

        Additional options which modify how embedded documents are retrieved
            Optionalinvalid?: boolean

            Allow retrieving an invalid Embedded Document.
            Optionalstrict?: boolean

            Throw an Error if the requested id does not exist. See Collection#get
    Returns Document<object, DocumentConstructionContext>

    The retrieved embedded Document instance, or undefined
    Throws

    If the embedded collection does not exist, or if strict is true and the Embedded Document could not be found.

getFlag

    getFlag(scope: string, key: string): any

    Get the value of a "flag" for this document See the setFlag method for more details on flags
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns any

    The flag value

getUserLevel

    getUserLevel(user?: BaseUser): DocumentOwnershipNumber

    Get the explicit permission level that a User has over this Document, a value in CONST.DOCUMENT_OWNERSHIP_LEVELS. Compendium content ignores the ownership field in favor of User role-based ownership. Otherwise, Documents use granular per-User ownership definitions and Embedded Documents defer to their parent ownership.

    This method returns the value recorded in Document ownership, regardless of the User's role, for example a GAMEMASTER user might still return a result of NONE if they are not explicitly denoted as having a level.

    To test whether a user has a certain capability over the document, testUserPermission should be used.
    Parameters
        Optionaluser: BaseUser

        The User being tested
    Returns DocumentOwnershipNumber

    A numeric permission level from CONST.DOCUMENT_OWNERSHIP_LEVELS

migrateSystemData

    migrateSystemData(): object

    For Documents which include game system data, migrate the system data object to conform to its latest data model. The data model is defined by the template.json specification included by the game system.
    Returns object

    The migrated system data object

reset

    reset(): void

    Reset the state of this data instance back to mirror the contained source data, erasing any changes.
    Returns void

    Inherited from DataModel.reset

setFlag

    setFlag(
        scope: string,
        key: string,
        value: any,
    ): Promise<Document<object, DocumentConstructionContext>>

    Assign a "flag" to this document. Flags represent key-value type data which can be used to store flexible or arbitrary data required by either the core software, game systems, or user-created modules.

    Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.

    Flags set by the core software use the "core" scope. Flags set by game systems or modules should use the canonical name attribute for the module Flags set by an individual world should "world" as the scope.

    Flag values can assume almost any data type. Setting a flag value to null will delete that flag.
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
        value: any

        The flag value
    Returns Promise<Document<object, DocumentConstructionContext>>

    A Promise resolving to the updated document

testUserPermission

    testUserPermission(
        user: BaseUser,
        permission: DocumentOwnershipLevel,
        options?: { exact?: boolean },
    ): boolean

    Test whether a certain User has a requested permission level (or greater) over the Document
    Parameters
        user: BaseUser

        The User being tested
        permission: DocumentOwnershipLevel

        The permission level from DOCUMENT_OWNERSHIP_LEVELS to test
        options: { exact?: boolean } = {}

        Additional options involved in the permission test
            Optionalexact?: boolean

            Require the exact permission level requested?
    Returns boolean

    Does the user have this permission level over the Document?

toJSON

    toJSON(): object

    Extract the source data for the DataModel into a simple object format that can be serialized.
    Returns object

    The document source data expressed as a plain object

    Inherited from DataModel.toJSON

toObject

    toObject(source?: boolean): any

    Copy and transform the DataModel into a plain object. Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
    Parameters
        source: boolean = true

        Draw values from the underlying data source rather than transformed values
    Returns any

    The extracted primitive object

    Overrides DataModel.toObject

traverseEmbeddedDocuments

    traverseEmbeddedDocuments(_parentPath?: string): Generator<any, void, any>

    Iterate over all embedded Documents that are hierarchical children of this Document.
    Parameters
        Optional_parentPath: string

        A parent field path already traversed
    Returns Generator<any, void, any>
    Yields

unsetFlag

    unsetFlag(
        scope: string,
        key: string,
    ): Promise<Document<object, DocumentConstructionContext>>

    Remove a flag assigned to the document
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns Promise<Document<object, DocumentConstructionContext>>

    The updated document instance

update

    update(
        data?: object,
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Update this Document using incremental data, saving it to the database.
    Parameters
        Optionaldata: object = {}

        Differential update data which modifies the existing values of this document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the update operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The updated Document instance, or undefined not updated
    See

    Document.updateDocuments

updateEmbeddedDocuments

    updateEmbeddedDocuments(
        embeddedName: string,
        updates?: object[],
        operation?: DatabaseUpdateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple embedded Document instances within a parent Document using provided differential data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: DatabaseUpdateOperation = {}

        Parameters of the database update workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    See

    Document.updateDocuments

updateSource

    updateSource(changes?: object, options?: DataModelUpdateOptions): object

    Update the DataModel locally by applying an object of changes to its source data. The provided changes are expanded, cleaned, validated, and stored to the source data object for this model. The provided changes argument is mutated in this process. The source data is then re-initialized to apply those changes to the prepared data. The method returns an object of differential changes which modified the original data.
    Parameters
        changes: object = {}

        New values which should be applied to the data model
        options: DataModelUpdateOptions = {}

        Options which determine how the new data is merged
    Returns object

    An object containing differential keys and values that were changed
    Throws

    An error if the requested data model changes were invalid

    Inherited from DataModel.updateSource

validate

    validate(options?: DataModelValidationOptions): boolean

    Validate the data contained in the document to check for type and content. If changes are provided, missing types are added to it before cleaning and validation. This mutates the provided changes. This function throws an error if data within the document is not valid.
    Parameters
        options: DataModelValidationOptions = {}

        Options which modify how the model is validated
    Returns boolean

    Whether the data source or proposed change is reported as valid. A boolean is always returned if validation is non-strict.
    Throws

    An error thrown if validation is strict and a failure occurs.

    Inherited from DataModel.validate

Protected
_initialize

    _initialize(options?: object): void
    Protected

    Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
    Parameters
        Optionaloptions: object = {}

        Options provided to the model constructor
    Returns void

    Inherited from DataModel._initialize

Protected
_initializeSource

    _initializeSource(
        data: object | DataModel<object, DataModelConstructionContext>,
        options?: object,
    ): object
    Protected

    Initialize the source data for a new DataModel instance. One-time migrations and initial cleaning operations are applied to the source data.
    Parameters
        data: object | DataModel<object, DataModelConstructionContext>

        The candidate source data from which the model will be constructed
        Optionaloptions: object = {}

        Options provided to the model constructor
    Returns object

    Migrated and cleaned source data which will be stored to the model instance, which is the same object as the data argument

    Inherited from DataModel._initializeSource

Protected
_onCreate

    _onCreate(data: object, options: object, userId: string): void
    Protected

    Post-process a creation operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        data: object

        The initial data object provided to the document creation request
        options: object

        Additional options which modify the creation request
        userId: string

        The id of the User requesting the document update
    Returns void

Protected
_onDelete

    _onDelete(options: object, userId: string): void
    Protected

    Post-process a deletion operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        options: object

        Additional options which modify the deletion request
        userId: string

        The id of the User requesting the document update
    Returns void

Protected
_onUpdate

    _onUpdate(changed: object, options: object, userId: string): void
    Protected

    Post-process an update operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        changed: object

        The differential data that was changed relative to the documents prior values
        options: object

        Additional options which modify the update request
        userId: string

        The id of the User requesting the document update
    Returns void

Protected
_preCreate

    _preCreate(
        data: object,
        options: object,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a creation operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.

    Modifications to the pending Document instance must be performed using updateSource.
    Parameters
        data: object

        The initial data object provided to the document creation request
        options: object

        Additional options which modify the creation request
        user: BaseUser

        The User requesting the document creation
    Returns Promise<boolean | void>

    Return false to exclude this Document from the creation operation

Protected
_preDelete

    _preDelete(options: object, user: BaseUser): Promise<boolean | void>
    Protected

    Pre-process a deletion operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        options: object

        Additional options which modify the deletion request
        user: BaseUser

        The User requesting the document deletion
    Returns Promise<boolean | void>

    A return value of false indicates the deletion operation should be cancelled.

Protected
_preUpdate

    _preUpdate(
        changes: object,
        options: object,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process an update operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        changes: object

        The candidate changes to the Document
        options: object

        Additional options which modify the update request
        user: BaseUser

        The User requesting the document update
    Returns Promise<boolean | void>

    A return value of false indicates the update operation should be cancelled.

Static
_initializationOrder

    _initializationOrder(): Generator<any[], void, unknown>
    Returns Generator<any[], void, unknown>

    Overrides DataModel._initializationOrder

Static
canUserCreate

    canUserCreate(user: BaseUser): boolean

    Test whether a given User has sufficient permissions to create Documents of this type in general. This does not guarantee that the User is able to create all Documents of this type, as certain document-specific requirements may also be present.

    Generally speaking, this method is used to verify whether a User should be presented with the option to create Documents of this type in the UI.
    Parameters
        user: BaseUser

        The User being tested
    Returns boolean

    Does the User have a sufficient role to create?

Static
cleanData

    cleanData(source?: object, options?: object): object

    Clean a data source object to conform to a specific provided schema.
    Parameters
        Optionalsource: object = {}

        The source data object
        Optionaloptions: object = {}

        Additional options which are passed to field cleaning methods
    Returns object

    The cleaned source data, which is the same object as the source argument

    Inherited from DataModel.cleanData

Static
create

    create(
        data?:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    Create a new Document using provided input data, saving it to the database.
    Parameters
        Optionaldata:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[] = {}

        Initial data used to create this Document, or a Document instance to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the creation operation
    Returns Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    The created Document instance(s)
    See

    Document.createDocuments
    Example: Create a World-level Item

    const data = [{name: "Special Sword", type: "weapon"}];
    const created = await Item.implementation.create(data);

Example: Create an Actor-owned Item

const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});

Example: Create an Item in a Compendium pack

const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});

Static
createDocuments

    createDocuments(
        data?: (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple Documents using provided input data. Data is provided as an array of objects where each individual object becomes one new Document.
    Parameters
        data: (object | Document<object, DocumentConstructionContext>)[] = []

        An array of data objects or existing Documents to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the requested creation operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    Example: Create a single Document

    const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
    const created = await Actor.implementation.createDocuments(data);

Example: Create multiple Documents

const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);

Example: Create multiple embedded Documents within a parent

const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});

Example: Create a Document within a Compendium pack

const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});

Static
Abstract
defineSchema

    defineSchema(): DataSchema

    Define the data schema for models of this type. The schema is populated the first time it is accessed and cached for future reuse.

    The schema, through its fields, provide the essential cleaning, validation, and initialization methods to turn the _source values into direct properties of the data model. The schema is a static property of the model and is reused by all instances to perform validation.

    The schemas defined by the core software in classes like foundry.documents.BaseActor are validated by the server, where user code does not run. However, almost all documents have a flags field to store data, and many have a system field that can be configured to be a foundry.abstract.TypeDataModel instance. Those models are not constructed on the server and rely purely on client-side code, which means certain extra-sensitive fields must be also be registered through your package manifest. foundry.packages.types.ServerSanitizationFields
    Returns DataSchema
    Example

    class SomeModel extends foundry.abstract.DataModel {
      static defineSchema() {
        return {
          foo: new foundry.data.fields.StringField()
        }
      }
    }

    class AnotherModel extends SomeModel {
      static defineSchema() {
        // Inheritance and object oriented principles apply to schema definition
        const schema = super.defineSchema()

        schema.bar = new foundry.data.fields.NumberField()

        return schema;
      }
    }

    Inherited from DataModel.defineSchema

Static
deleteDocuments

    deleteDocuments(
        ids?: string[],
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete one or multiple existing Documents using an array of provided ids. Data is provided as an array of string ids for the documents to delete.
    Parameters
        ids: string[] = []

        An array of string ids for the documents to be deleted
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the database deletion operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    Example: Delete a single Document

    const tim = game.actors.getName("Tim");
    const deleted = await Actor.implementation.deleteDocuments([tim.id]);

Example: Delete multiple Documents

const tim = game.actors.getName("Tim");
const tom = game.actors.getName("Tom");
const deleted = await Actor.implementation.deleteDocuments([tim.id, tom.id]);

Example: Delete multiple embedded Documents within a parent

const tim = game.actors.getName("Tim");
const sword = tim.items.getName("Sword");
const shield = tim.items.getName("Shield");
const deleted = await Item.implementation.deleteDocuments([sword.id, shield.id], parent: actor});

Example: Delete Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const deleted = await Actor.implementation.deleteDocuments([actor.id], {pack: "mymodule.mypack"});

Static
fromJSON

    fromJSON(json: string): DataModel<object, DataModelConstructionContext>

    Create a DataModel instance using a provided serialized JSON string.
    Parameters
        json: string

        Serialized document data in string format
    Returns DataModel<object, DataModelConstructionContext>

    A constructed data model instance

    Inherited from DataModel.fromJSON

Static
fromSource

    fromSource(
        source: object,
        context?: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions,
    ): DataModel<object, DataModelConstructionContext>

    Create a new instance of this DataModel from a source record. The source is presumed to be trustworthy and is not strictly validated.
    Parameters
        source: object

        Initial document data which comes from a trusted source.
        Optionalcontext: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions = {}

        Model construction context
    Returns DataModel<object, DataModelConstructionContext>

    Inherited from DataModel.fromSource

Static
get

    get(
        documentId: string,
        operation?: DatabaseGetOperation,
    ): null | Document<object, DocumentConstructionContext>

    Get a World-level Document of this type by its id.
    Parameters
        documentId: string

        The Document ID
        Optionaloperation: DatabaseGetOperation = {}

        Parameters of the get operation
    Returns null | Document<object, DocumentConstructionContext>

    The retrieved Document, or null

Static
getCollectionName

    getCollectionName(name: string): null | string

    A compatibility method that returns the appropriate name of an embedded collection within this Document.
    Parameters
        name: string

        An existing collection name or a document name.
    Returns null | string

    The provided collection name if it exists, the first available collection for the document name provided, or null if no appropriate embedded collection could be found.
    Example: Passing an existing collection name.

    Actor.implementation.getCollectionName("items");
    // returns "items"

Example: Passing a document name.

Actor.implementation.getCollectionName("Item");
// returns "items"

Static
migrateData

    migrateData(source: object): object

    Migrate candidate source data for this DataModel which may require initial cleaning or transformations.
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Inherited from DataModel.migrateData

Static
migrateDataSafe

    migrateDataSafe(source: object): object

    Wrap data migration in a try/catch which attempts it safely
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Inherited from DataModel.migrateDataSafe

Static
shimData

    shimData(data: object, options?: { embedded?: boolean }): object

    Take data which conforms to the current data schema and add backwards-compatible accessors to it in order to support older code which uses this data.
    Parameters
        data: object

        Data which matches the current schema
        Optionaloptions: { embedded?: boolean } = {}

        Additional shimming options
            Optionalembedded?: boolean

            Apply shims to embedded models?
    Returns object

    Data with added backwards-compatible properties, which is the same object as the data argument

    Inherited from DataModel.shimData

Static
updateDocuments

    updateDocuments(
        updates?: object[],
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple Document instances using provided differential data. Data is provided as an array of objects where each individual object updates one existing Document.
    Parameters
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the database update operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    Example: Update a single Document

    const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
    const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple Documents

const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple embedded Documents within a parent

const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});

Example: Update Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});

Static
validateJoint

    validateJoint(data: object): void

    Evaluate joint validation rules which apply validation conditions across multiple fields of the model. Field-specific validation rules should be defined as part of the DataSchema for the model. This method allows for testing aggregate rules which impose requirements on the overall model.
    Parameters
        data: object

        Candidate data for the model
    Returns void
    Throws

    An error if a validation failure is detected

    Inherited from DataModel.validateJoint

Protected
Static
_onCreateOperation

    _onCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a creation operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onCreate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User who performed the creation operation
    Returns Promise<void>

Protected
Static
_onDeleteOperation

    _onDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a deletion operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onDelete workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were deleted
        operation: DatabaseDeleteOperation

        Parameters of the database deletion operation
        user: BaseUser

        The User who performed the deletion operation
    Returns Promise<void>

Protected
Static
_onUpdateOperation

    _onUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process an update operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onUpdate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User who performed the update operation
    Returns Promise<void>

Protected
Static
_preCreateOperation

    _preCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a creation operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preCreate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to pending documents must mutate the documents array or alter individual document instances using updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Pending document instances to be created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User requesting the creation operation
    Returns Promise<boolean | void>

    Return false to cancel the creation operation entirely

Protected
Static
_preDeleteOperation

    _preDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a deletion operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preDelete workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested deletions are performed by mutating the operation object. updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be deleted
        operation: DatabaseDeleteOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the deletion operation
    Returns Promise<boolean | void>

    Return false to cancel the deletion operation entirely

Protected
Static
_preUpdateOperation

    _preUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process an update operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preUpdate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested updates are performed by mutating the data array of the operation.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the update operation
    Returns Promise<boolean | void>

    Return false to cancel the update operation entirely

    _configure

    _configure(__namedParameters?: { pack?: null; parentCollection?: null }): void
    Parameters
        __namedParameters: { pack?: null; parentCollection?: null } = {}
    Returns void

    Inherited from Document._configure

_initialize

    _initialize(options: any): void

    Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
    Parameters
        options: any

        Options provided to the model constructor
    Returns void

    Overrides Document._initialize

_initializeSource

    _initializeSource(source: any, options: any): any

    Initialize the source data for a new DataModel instance. One-time migrations and initial cleaning operations are applied to the source data.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
        options: any

        Options provided to the model constructor
    Returns any

    Migrated and cleaned source data which will be stored to the model instance, which is the same object as the data argument

    Overrides Document._initializeSource

_preCreate

    _preCreate(data: any, options: any, user: any): Promise<undefined | false>

    Pre-process a creation operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.

    Modifications to the pending Document instance must be performed using updateSource.
    Parameters
        data: any

        The initial data object provided to the document creation request
        options: any

        Additional options which modify the creation request
        user: any

        The User requesting the document creation
    Returns Promise<undefined | false>

    Return false to exclude this Document from the creation operation

    Overrides Document._preCreate

_preUpdate

    _preUpdate(changed: any, options: any, user: any): Promise<undefined | false>

    Pre-process an update operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        changed: any

        The candidate changes to the Document
        options: any

        Additional options which modify the update request
        user: any

        The User requesting the document update
    Returns Promise<undefined | false>

    A return value of false indicates the update operation should be cancelled.

    Overrides Document._preUpdate

canUserModify

    canUserModify(user: BaseUser, action: string, data?: object): boolean

    Test whether a given User has permission to perform some action on this Document
    Parameters
        user: BaseUser

        The User attempting modification
        action: string

        The attempted action
        Optionaldata: object = {}

        Data involved in the attempted action
    Returns boolean

    Does the User have permission?

    Inherited from Document.canUserModify

clone

    clone(
        data?: object,
        context?: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions,
    ):
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    Clone a document, creating a new document by combining current data with provided overrides. The cloned document is ephemeral and not yet saved to the database.
    Parameters
        Optionaldata: object = {}

        Additional data which overrides current document data at the time of creation
        Optionalcontext: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions = {}

        Additional context options passed to the create method
    Returns
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    The cloned Document instance

    Inherited from Document.clone

createEmbeddedDocuments

    createEmbeddedDocuments(
        embeddedName: string,
        data?: object[],
        operation?: DatabaseCreateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple embedded Document instances within this parent Document using provided input data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        data: object[] = []

        An array of data objects used to create multiple documents
        Optionaloperation: DatabaseCreateOperation = {}

        Parameters of the database creation workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    See

    Document.createDocuments

    Inherited from Document.createEmbeddedDocuments

delete

    delete(
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Delete this Document, removing it from the database.
    Parameters
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the deletion operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The deleted Document instance, or undefined if not deleted
    See

    Document.deleteDocuments

    Inherited from Document.delete

deleteEmbeddedDocuments

    deleteEmbeddedDocuments(
        embeddedName: string,
        ids: string[],
        operation?: DatabaseDeleteOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete multiple embedded Document instances within a parent Document using provided string ids.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        ids: string[]

        An array of string ids for each Document to be deleted
        Optionaloperation: DatabaseDeleteOperation = {}

        Parameters of the database deletion workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    See

    Document.deleteDocuments

    Inherited from Document.deleteEmbeddedDocuments

getEmbeddedCollection

    getEmbeddedCollection(embeddedName: string): DocumentCollection

    Obtain a reference to the Array of source data within the data object for a certain embedded Document name
    Parameters
        embeddedName: string

        The name of the embedded Document type
    Returns DocumentCollection

    The Collection instance of embedded Documents of the requested type

    Inherited from Document.getEmbeddedCollection

getEmbeddedDocument

    getEmbeddedDocument(
        embeddedName: string,
        id: string,
        options?: { invalid?: boolean; strict?: boolean },
    ): Document<object, DocumentConstructionContext>

    Get an embedded document by its id from a named collection in the parent document.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        id: string

        The id of the child document to retrieve
        Optionaloptions: { invalid?: boolean; strict?: boolean } = {}

        Additional options which modify how embedded documents are retrieved
            Optionalinvalid?: boolean

            Allow retrieving an invalid Embedded Document.
            Optionalstrict?: boolean

            Throw an Error if the requested id does not exist. See Collection#get
    Returns Document<object, DocumentConstructionContext>

    The retrieved embedded Document instance, or undefined
    Throws

    If the embedded collection does not exist, or if strict is true and the Embedded Document could not be found.

    Inherited from Document.getEmbeddedDocument

getFlag

    getFlag(scope: string, key: string): any

    Get the value of a "flag" for this document See the setFlag method for more details on flags
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns any

    The flag value

    Inherited from Document.getFlag

getUserLevel

    getUserLevel(user?: BaseUser): DocumentOwnershipNumber

    Get the explicit permission level that a User has over this Document, a value in CONST.DOCUMENT_OWNERSHIP_LEVELS. Compendium content ignores the ownership field in favor of User role-based ownership. Otherwise, Documents use granular per-User ownership definitions and Embedded Documents defer to their parent ownership.

    This method returns the value recorded in Document ownership, regardless of the User's role, for example a GAMEMASTER user might still return a result of NONE if they are not explicitly denoted as having a level.

    To test whether a user has a certain capability over the document, testUserPermission should be used.
    Parameters
        Optionaluser: BaseUser

        The User being tested
    Returns DocumentOwnershipNumber

    A numeric permission level from CONST.DOCUMENT_OWNERSHIP_LEVELS

    Inherited from Document.getUserLevel

migrateSystemData

    migrateSystemData(): object

    For Documents which include game system data, migrate the system data object to conform to its latest data model. The data model is defined by the template.json specification included by the game system.
    Returns object

    The migrated system data object

    Inherited from Document.migrateSystemData

reset

    reset(): void

    Reset the state of this data instance back to mirror the contained source data, erasing any changes.
    Returns void

    Inherited from Document.reset

setFlag

    setFlag(
        scope: string,
        key: string,
        value: any,
    ): Promise<Document<object, DocumentConstructionContext>>

    Assign a "flag" to this document. Flags represent key-value type data which can be used to store flexible or arbitrary data required by either the core software, game systems, or user-created modules.

    Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.

    Flags set by the core software use the "core" scope. Flags set by game systems or modules should use the canonical name attribute for the module Flags set by an individual world should "world" as the scope.

    Flag values can assume almost any data type. Setting a flag value to null will delete that flag.
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
        value: any

        The flag value
    Returns Promise<Document<object, DocumentConstructionContext>>

    A Promise resolving to the updated document

    Inherited from Document.setFlag

testUserPermission

    testUserPermission(
        user: BaseUser,
        permission: DocumentOwnershipLevel,
        options?: { exact?: boolean },
    ): boolean

    Test whether a certain User has a requested permission level (or greater) over the Document
    Parameters
        user: BaseUser

        The User being tested
        permission: DocumentOwnershipLevel

        The permission level from DOCUMENT_OWNERSHIP_LEVELS to test
        options: { exact?: boolean } = {}

        Additional options involved in the permission test
            Optionalexact?: boolean

            Require the exact permission level requested?
    Returns boolean

    Does the user have this permission level over the Document?

    Inherited from Document.testUserPermission

toJSON

    toJSON(): object

    Extract the source data for the DataModel into a simple object format that can be serialized.
    Returns object

    The document source data expressed as a plain object

    Inherited from Document.toJSON

toObject

    toObject(source?: boolean): any

    Copy and transform the DataModel into a plain object. Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
    Parameters
        source: boolean = true

        Draw values from the underlying data source rather than transformed values
    Returns any

    The extracted primitive object

    Inherited from Document.toObject

traverseEmbeddedDocuments

    traverseEmbeddedDocuments(_parentPath?: string): Generator<any, void, any>

    Iterate over all embedded Documents that are hierarchical children of this Document.
    Parameters
        Optional_parentPath: string

        A parent field path already traversed
    Returns Generator<any, void, any>
    Yields

    Inherited from Document.traverseEmbeddedDocuments

unsetFlag

    unsetFlag(
        scope: string,
        key: string,
    ): Promise<Document<object, DocumentConstructionContext>>

    Remove a flag assigned to the document
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns Promise<Document<object, DocumentConstructionContext>>

    The updated document instance

    Inherited from Document.unsetFlag

update

    update(
        data?: object,
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Update this Document using incremental data, saving it to the database.
    Parameters
        Optionaldata: object = {}

        Differential update data which modifies the existing values of this document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the update operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The updated Document instance, or undefined not updated
    See

    Document.updateDocuments

    Inherited from Document.update

updateEmbeddedDocuments

    updateEmbeddedDocuments(
        embeddedName: string,
        updates?: object[],
        operation?: DatabaseUpdateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple embedded Document instances within a parent Document using provided differential data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: DatabaseUpdateOperation = {}

        Parameters of the database update workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    See

    Document.updateDocuments

    Inherited from Document.updateEmbeddedDocuments

updateSource

    updateSource(changes?: object, options?: DataModelUpdateOptions): object

    Update the DataModel locally by applying an object of changes to its source data. The provided changes are expanded, cleaned, validated, and stored to the source data object for this model. The provided changes argument is mutated in this process. The source data is then re-initialized to apply those changes to the prepared data. The method returns an object of differential changes which modified the original data.
    Parameters
        changes: object = {}

        New values which should be applied to the data model
        options: DataModelUpdateOptions = {}

        Options which determine how the new data is merged
    Returns object

    An object containing differential keys and values that were changed
    Throws

    An error if the requested data model changes were invalid

    Inherited from Document.updateSource

validate

    validate(options?: DataModelValidationOptions): boolean

    Validate the data contained in the document to check for type and content. If changes are provided, missing types are added to it before cleaning and validation. This mutates the provided changes. This function throws an error if data within the document is not valid.
    Parameters
        options: DataModelValidationOptions = {}

        Options which modify how the model is validated
    Returns boolean

    Whether the data source or proposed change is reported as valid. A boolean is always returned if validation is non-strict.
    Throws

    An error thrown if validation is strict and a failure occurs.

    Inherited from Document.validate

Protected
_onCreate

    _onCreate(data: object, options: object, userId: string): void
    Protected

    Post-process a creation operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        data: object

        The initial data object provided to the document creation request
        options: object

        Additional options which modify the creation request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onCreate

Protected
_onDelete

    _onDelete(options: object, userId: string): void
    Protected

    Post-process a deletion operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        options: object

        Additional options which modify the deletion request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onDelete

Protected
_onUpdate

    _onUpdate(changed: object, options: object, userId: string): void
    Protected

    Post-process an update operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        changed: object

        The differential data that was changed relative to the documents prior values
        options: object

        Additional options which modify the update request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onUpdate

Protected
_preDelete

    _preDelete(options: object, user: BaseUser): Promise<boolean | void>
    Protected

    Pre-process a deletion operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        options: object

        Additional options which modify the deletion request
        user: BaseUser

        The User requesting the document deletion
    Returns Promise<boolean | void>

    A return value of false indicates the deletion operation should be cancelled.

    Inherited from Document._preDelete

Static
_initializationOrder

    _initializationOrder(): Generator<any[], void, unknown>
    Returns Generator<any[], void, unknown>

    Inherited from Document._initializationOrder

Static
canUserCreate

    canUserCreate(user: any): any
    Parameters
        user: any
    Returns any

    Overrides Document.canUserCreate

Static
cleanData

    cleanData(source?: object, options?: object): object

    Clean a data source object to conform to a specific provided schema.
    Parameters
        Optionalsource: object = {}

        The source data object
        Optionaloptions: object = {}

        Additional options which are passed to field cleaning methods
    Returns object

    The cleaned source data, which is the same object as the source argument

    Inherited from Document.cleanData

Static
create

    create(
        data?:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    Create a new Document using provided input data, saving it to the database.
    Parameters
        Optionaldata:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[] = {}

        Initial data used to create this Document, or a Document instance to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the creation operation
    Returns Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    The created Document instance(s)
    See

    Document.createDocuments
    Example: Create a World-level Item

    const data = [{name: "Special Sword", type: "weapon"}];
    const created = await Item.implementation.create(data);

Example: Create an Actor-owned Item

const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});

Example: Create an Item in a Compendium pack

const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});

    Inherited from Document.create

Static
createDocuments

    createDocuments(
        data?: (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple Documents using provided input data. Data is provided as an array of objects where each individual object becomes one new Document.
    Parameters
        data: (object | Document<object, DocumentConstructionContext>)[] = []

        An array of data objects or existing Documents to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the requested creation operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    Example: Create a single Document

    const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
    const created = await Actor.implementation.createDocuments(data);

Example: Create multiple Documents

const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);

Example: Create multiple embedded Documents within a parent

const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});

Example: Create a Document within a Compendium pack

const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});

    Inherited from Document.createDocuments

Static
defineSchema

    defineSchema(): {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }

    Define the data schema for models of this type. The schema is populated the first time it is accessed and cached for future reuse.

    The schema, through its fields, provide the essential cleaning, validation, and initialization methods to turn the _source values into direct properties of the data model. The schema is a static property of the model and is reused by all instances to perform validation.

    The schemas defined by the core software in classes like foundry.documents.BaseActor are validated by the server, where user code does not run. However, almost all documents have a flags field to store data, and many have a system field that can be configured to be a foundry.abstract.TypeDataModel instance. Those models are not constructed on the server and rely purely on client-side code, which means certain extra-sensitive fields must be also be registered through your package manifest. foundry.packages.types.ServerSanitizationFields
    Returns {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }
    Example

    class SomeModel extends foundry.abstract.DataModel {
      static defineSchema() {
        return {
          foo: new foundry.data.fields.StringField()
        }
      }
    }

    class AnotherModel extends SomeModel {
      static defineSchema() {
        // Inheritance and object oriented principles apply to schema definition
        const schema = super.defineSchema()

        schema.bar = new foundry.data.fields.NumberField()

        return schema;
      }
    }

    Overrides Document.defineSchema

Static
deleteDocuments

    deleteDocuments(
        ids?: string[],
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete one or multiple existing Documents using an array of provided ids. Data is provided as an array of string ids for the documents to delete.
    Parameters
        ids: string[] = []

        An array of string ids for the documents to be deleted
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the database deletion operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    Example: Delete a single Document

    const tim = game.actors.getName("Tim");
    const deleted = await Actor.implementation.deleteDocuments([tim.id]);

Example: Delete multiple Documents

const tim = game.actors.getName("Tim");
const tom = game.actors.getName("Tom");
const deleted = await Actor.implementation.deleteDocuments([tim.id, tom.id]);

Example: Delete multiple embedded Documents within a parent

const tim = game.actors.getName("Tim");
const sword = tim.items.getName("Sword");
const shield = tim.items.getName("Shield");
const deleted = await Item.implementation.deleteDocuments([sword.id, shield.id], parent: actor});

Example: Delete Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const deleted = await Actor.implementation.deleteDocuments([actor.id], {pack: "mymodule.mypack"});

    Inherited from Document.deleteDocuments

Static
fromJSON

    fromJSON(json: string): DataModel<object, DataModelConstructionContext>

    Create a DataModel instance using a provided serialized JSON string.
    Parameters
        json: string

        Serialized document data in string format
    Returns DataModel<object, DataModelConstructionContext>

    A constructed data model instance

    Inherited from Document.fromJSON

Static
fromSource

    fromSource(
        source: object,
        context?: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions,
    ): DataModel<object, DataModelConstructionContext>

    Create a new instance of this DataModel from a source record. The source is presumed to be trustworthy and is not strictly validated.
    Parameters
        source: object

        Initial document data which comes from a trusted source.
        Optionalcontext: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions = {}

        Model construction context
    Returns DataModel<object, DataModelConstructionContext>

    Inherited from Document.fromSource

Static
get

    get(
        documentId: string,
        operation?: DatabaseGetOperation,
    ): null | Document<object, DocumentConstructionContext>

    Get a World-level Document of this type by its id.
    Parameters
        documentId: string

        The Document ID
        Optionaloperation: DatabaseGetOperation = {}

        Parameters of the get operation
    Returns null | Document<object, DocumentConstructionContext>

    The retrieved Document, or null

    Inherited from Document.get

Static
getCollectionName

    getCollectionName(name: string): null | string

    A compatibility method that returns the appropriate name of an embedded collection within this Document.
    Parameters
        name: string

        An existing collection name or a document name.
    Returns null | string

    The provided collection name if it exists, the first available collection for the document name provided, or null if no appropriate embedded collection could be found.
    Example: Passing an existing collection name.

    Actor.implementation.getCollectionName("items");
    // returns "items"

Example: Passing a document name.

Actor.implementation.getCollectionName("Item");
// returns "items"

    Inherited from Document.getCollectionName

Static
getDefaultArtwork

    getDefaultArtwork(
        actorData: ActorData,
    ): { img: string; texture: { src: string } }

    Determine default artwork based on the provided actor data.
    Parameters
        actorData: ActorData

        The source actor data.
    Returns { img: string; texture: { src: string } }

    Candidate actor image and prototype token artwork.

Static
migrateData

    migrateData(source: any): object

    Migrate candidate source data for this DataModel which may require initial cleaning or transformations.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Overrides Document.migrateData

Static
migrateDataSafe

    migrateDataSafe(source: object): object

    Wrap data migration in a try/catch which attempts it safely
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Inherited from Document.migrateDataSafe

Static
shimData

    shimData(source: any, options: any): object

    Take data which conforms to the current data schema and add backwards-compatible accessors to it in order to support older code which uses this data.
    Parameters
        source: any

        Data which matches the current schema
        options: any

        Additional shimming options
    Returns object

    Data with added backwards-compatible properties, which is the same object as the data argument

    Overrides Document.shimData

Static
updateDocuments

    updateDocuments(
        updates?: object[],
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple Document instances using provided differential data. Data is provided as an array of objects where each individual object updates one existing Document.
    Parameters
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the database update operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    Example: Update a single Document

    const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
    const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple Documents

const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple embedded Documents within a parent

const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});

Example: Update Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});

    Inherited from Document.updateDocuments

Static
validateJoint

    validateJoint(data: object): void

    Evaluate joint validation rules which apply validation conditions across multiple fields of the model. Field-specific validation rules should be defined as part of the DataSchema for the model. This method allows for testing aggregate rules which impose requirements on the overall model.
    Parameters
        data: object

        Candidate data for the model
    Returns void
    Throws

    An error if a validation failure is detected

    Inherited from Document.validateJoint

Protected
Static
_onCreateOperation

    _onCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a creation operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onCreate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User who performed the creation operation
    Returns Promise<void>

    Inherited from Document._onCreateOperation

Protected
Static
_onDeleteOperation

    _onDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a deletion operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onDelete workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were deleted
        operation: DatabaseDeleteOperation

        Parameters of the database deletion operation
        user: BaseUser

        The User who performed the deletion operation
    Returns Promise<void>

    Inherited from Document._onDeleteOperation

Protected
Static
_onUpdateOperation

    _onUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process an update operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onUpdate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User who performed the update operation
    Returns Promise<void>

    Inherited from Document._onUpdateOperation

Protected
Static
_preCreateOperation

    _preCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a creation operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preCreate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to pending documents must mutate the documents array or alter individual document instances using updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Pending document instances to be created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User requesting the creation operation
    Returns Promise<boolean | void>

    Return false to cancel the creation operation entirely

    Inherited from Document._preCreateOperation

Protected
Static
_preDeleteOperation

    _preDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a deletion operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preDelete workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested deletions are performed by mutating the operation object. updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be deleted
        operation: DatabaseDeleteOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the deletion operation
    Returns Promise<boolean | void>

    Return false to cancel the deletion operation entirely

    Inherited from Document._preDeleteOperation

Protected
Static
_preUpdateOperation

    _preUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process an update operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preUpdate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested updates are performed by mutating the data array of the operation.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the update operation
    Returns Promise<boolean | void>

    Return false to cancel the update operation entirely

    Inherited from Document._preUpdateOperation_configure

    _configure(__namedParameters?: { pack?: null; parentCollection?: null }): void
    Parameters
        __namedParameters: { pack?: null; parentCollection?: null } = {}
    Returns void

    Inherited from Document._configure

_initialize

    _initialize(options: any): void

    Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
    Parameters
        options: any

        Options provided to the model constructor
    Returns void

    Overrides Document._initialize

_initializeSource

    _initializeSource(source: any, options: any): any

    Initialize the source data for a new DataModel instance. One-time migrations and initial cleaning operations are applied to the source data.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
        options: any

        Options provided to the model constructor
    Returns any

    Migrated and cleaned source data which will be stored to the model instance, which is the same object as the data argument

    Overrides Document._initializeSource

_preCreate

    _preCreate(data: any, options: any, user: any): Promise<undefined | false>

    Pre-process a creation operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.

    Modifications to the pending Document instance must be performed using updateSource.
    Parameters
        data: any

        The initial data object provided to the document creation request
        options: any

        Additional options which modify the creation request
        user: any

        The User requesting the document creation
    Returns Promise<undefined | false>

    Return false to exclude this Document from the creation operation

    Overrides Document._preCreate

_preUpdate

    _preUpdate(changed: any, options: any, user: any): Promise<undefined | false>

    Pre-process an update operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        changed: any

        The candidate changes to the Document
        options: any

        Additional options which modify the update request
        user: any

        The User requesting the document update
    Returns Promise<undefined | false>

    A return value of false indicates the update operation should be cancelled.

    Overrides Document._preUpdate

canUserModify

    canUserModify(user: BaseUser, action: string, data?: object): boolean

    Test whether a given User has permission to perform some action on this Document
    Parameters
        user: BaseUser

        The User attempting modification
        action: string

        The attempted action
        Optionaldata: object = {}

        Data involved in the attempted action
    Returns boolean

    Does the User have permission?

    Inherited from Document.canUserModify

clone

    clone(
        data?: object,
        context?: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions,
    ):
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    Clone a document, creating a new document by combining current data with provided overrides. The cloned document is ephemeral and not yet saved to the database.
    Parameters
        Optionaldata: object = {}

        Additional data which overrides current document data at the time of creation
        Optionalcontext: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions = {}

        Additional context options passed to the create method
    Returns
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    The cloned Document instance

    Inherited from Document.clone

createEmbeddedDocuments

    createEmbeddedDocuments(
        embeddedName: string,
        data?: object[],
        operation?: DatabaseCreateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple embedded Document instances within this parent Document using provided input data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        data: object[] = []

        An array of data objects used to create multiple documents
        Optionaloperation: DatabaseCreateOperation = {}

        Parameters of the database creation workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    See

    Document.createDocuments

    Inherited from Document.createEmbeddedDocuments

delete

    delete(
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Delete this Document, removing it from the database.
    Parameters
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the deletion operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The deleted Document instance, or undefined if not deleted
    See

    Document.deleteDocuments

    Inherited from Document.delete

deleteEmbeddedDocuments

    deleteEmbeddedDocuments(
        embeddedName: string,
        ids: string[],
        operation?: DatabaseDeleteOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete multiple embedded Document instances within a parent Document using provided string ids.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        ids: string[]

        An array of string ids for each Document to be deleted
        Optionaloperation: DatabaseDeleteOperation = {}

        Parameters of the database deletion workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    See

    Document.deleteDocuments

    Inherited from Document.deleteEmbeddedDocuments

getEmbeddedCollection

    getEmbeddedCollection(embeddedName: string): DocumentCollection

    Obtain a reference to the Array of source data within the data object for a certain embedded Document name
    Parameters
        embeddedName: string

        The name of the embedded Document type
    Returns DocumentCollection

    The Collection instance of embedded Documents of the requested type

    Inherited from Document.getEmbeddedCollection

getEmbeddedDocument

    getEmbeddedDocument(
        embeddedName: string,
        id: string,
        options?: { invalid?: boolean; strict?: boolean },
    ): Document<object, DocumentConstructionContext>

    Get an embedded document by its id from a named collection in the parent document.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        id: string

        The id of the child document to retrieve
        Optionaloptions: { invalid?: boolean; strict?: boolean } = {}

        Additional options which modify how embedded documents are retrieved
            Optionalinvalid?: boolean

            Allow retrieving an invalid Embedded Document.
            Optionalstrict?: boolean

            Throw an Error if the requested id does not exist. See Collection#get
    Returns Document<object, DocumentConstructionContext>

    The retrieved embedded Document instance, or undefined
    Throws

    If the embedded collection does not exist, or if strict is true and the Embedded Document could not be found.

    Inherited from Document.getEmbeddedDocument

getFlag

    getFlag(scope: string, key: string): any

    Get the value of a "flag" for this document See the setFlag method for more details on flags
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns any

    The flag value

    Inherited from Document.getFlag

getUserLevel

    getUserLevel(user?: BaseUser): DocumentOwnershipNumber

    Get the explicit permission level that a User has over this Document, a value in CONST.DOCUMENT_OWNERSHIP_LEVELS. Compendium content ignores the ownership field in favor of User role-based ownership. Otherwise, Documents use granular per-User ownership definitions and Embedded Documents defer to their parent ownership.

    This method returns the value recorded in Document ownership, regardless of the User's role, for example a GAMEMASTER user might still return a result of NONE if they are not explicitly denoted as having a level.

    To test whether a user has a certain capability over the document, testUserPermission should be used.
    Parameters
        Optionaluser: BaseUser

        The User being tested
    Returns DocumentOwnershipNumber

    A numeric permission level from CONST.DOCUMENT_OWNERSHIP_LEVELS

    Inherited from Document.getUserLevel

migrateSystemData

    migrateSystemData(): object

    For Documents which include game system data, migrate the system data object to conform to its latest data model. The data model is defined by the template.json specification included by the game system.
    Returns object

    The migrated system data object

    Inherited from Document.migrateSystemData

reset

    reset(): void

    Reset the state of this data instance back to mirror the contained source data, erasing any changes.
    Returns void

    Inherited from Document.reset

setFlag

    setFlag(
        scope: string,
        key: string,
        value: any,
    ): Promise<Document<object, DocumentConstructionContext>>

    Assign a "flag" to this document. Flags represent key-value type data which can be used to store flexible or arbitrary data required by either the core software, game systems, or user-created modules.

    Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.

    Flags set by the core software use the "core" scope. Flags set by game systems or modules should use the canonical name attribute for the module Flags set by an individual world should "world" as the scope.

    Flag values can assume almost any data type. Setting a flag value to null will delete that flag.
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
        value: any

        The flag value
    Returns Promise<Document<object, DocumentConstructionContext>>

    A Promise resolving to the updated document

    Inherited from Document.setFlag

testUserPermission

    testUserPermission(
        user: BaseUser,
        permission: DocumentOwnershipLevel,
        options?: { exact?: boolean },
    ): boolean

    Test whether a certain User has a requested permission level (or greater) over the Document
    Parameters
        user: BaseUser

        The User being tested
        permission: DocumentOwnershipLevel

        The permission level from DOCUMENT_OWNERSHIP_LEVELS to test
        options: { exact?: boolean } = {}

        Additional options involved in the permission test
            Optionalexact?: boolean

            Require the exact permission level requested?
    Returns boolean

    Does the user have this permission level over the Document?

    Inherited from Document.testUserPermission

toJSON

    toJSON(): object

    Extract the source data for the DataModel into a simple object format that can be serialized.
    Returns object

    The document source data expressed as a plain object

    Inherited from Document.toJSON

toObject

    toObject(source?: boolean): any

    Copy and transform the DataModel into a plain object. Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
    Parameters
        source: boolean = true

        Draw values from the underlying data source rather than transformed values
    Returns any

    The extracted primitive object

    Inherited from Document.toObject

traverseEmbeddedDocuments

    traverseEmbeddedDocuments(_parentPath?: string): Generator<any, void, any>

    Iterate over all embedded Documents that are hierarchical children of this Document.
    Parameters
        Optional_parentPath: string

        A parent field path already traversed
    Returns Generator<any, void, any>
    Yields

    Inherited from Document.traverseEmbeddedDocuments

unsetFlag

    unsetFlag(
        scope: string,
        key: string,
    ): Promise<Document<object, DocumentConstructionContext>>

    Remove a flag assigned to the document
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns Promise<Document<object, DocumentConstructionContext>>

    The updated document instance

    Inherited from Document.unsetFlag

update

    update(
        data?: object,
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Update this Document using incremental data, saving it to the database.
    Parameters
        Optionaldata: object = {}

        Differential update data which modifies the existing values of this document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the update operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The updated Document instance, or undefined not updated
    See

    Document.updateDocuments

    Inherited from Document.update

updateEmbeddedDocuments

    updateEmbeddedDocuments(
        embeddedName: string,
        updates?: object[],
        operation?: DatabaseUpdateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple embedded Document instances within a parent Document using provided differential data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: DatabaseUpdateOperation = {}

        Parameters of the database update workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    See

    Document.updateDocuments

    Inherited from Document.updateEmbeddedDocuments

updateSource

    updateSource(changes?: object, options?: DataModelUpdateOptions): object

    Update the DataModel locally by applying an object of changes to its source data. The provided changes are expanded, cleaned, validated, and stored to the source data object for this model. The provided changes argument is mutated in this process. The source data is then re-initialized to apply those changes to the prepared data. The method returns an object of differential changes which modified the original data.
    Parameters
        changes: object = {}

        New values which should be applied to the data model
        options: DataModelUpdateOptions = {}

        Options which determine how the new data is merged
    Returns object

    An object containing differential keys and values that were changed
    Throws

    An error if the requested data model changes were invalid

    Inherited from Document.updateSource

validate

    validate(options?: DataModelValidationOptions): boolean

    Validate the data contained in the document to check for type and content. If changes are provided, missing types are added to it before cleaning and validation. This mutates the provided changes. This function throws an error if data within the document is not valid.
    Parameters
        options: DataModelValidationOptions = {}

        Options which modify how the model is validated
    Returns boolean

    Whether the data source or proposed change is reported as valid. A boolean is always returned if validation is non-strict.
    Throws

    An error thrown if validation is strict and a failure occurs.

    Inherited from Document.validate

Protected
_onCreate

    _onCreate(data: object, options: object, userId: string): void
    Protected

    Post-process a creation operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        data: object

        The initial data object provided to the document creation request
        options: object

        Additional options which modify the creation request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onCreate

Protected
_onDelete

    _onDelete(options: object, userId: string): void
    Protected

    Post-process a deletion operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        options: object

        Additional options which modify the deletion request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onDelete

Protected
_onUpdate

    _onUpdate(changed: object, options: object, userId: string): void
    Protected

    Post-process an update operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        changed: object

        The differential data that was changed relative to the documents prior values
        options: object

        Additional options which modify the update request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onUpdate

Protected
_preDelete

    _preDelete(options: object, user: BaseUser): Promise<boolean | void>
    Protected

    Pre-process a deletion operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        options: object

        Additional options which modify the deletion request
        user: BaseUser

        The User requesting the document deletion
    Returns Promise<boolean | void>

    A return value of false indicates the deletion operation should be cancelled.

    Inherited from Document._preDelete

Static
_initializationOrder

    _initializationOrder(): Generator<any[], void, unknown>
    Returns Generator<any[], void, unknown>

    Inherited from Document._initializationOrder

Static
canUserCreate

    canUserCreate(user: any): any
    Parameters
        user: any
    Returns any

    Overrides Document.canUserCreate

Static
cleanData

    cleanData(source?: object, options?: object): object

    Clean a data source object to conform to a specific provided schema.
    Parameters
        Optionalsource: object = {}

        The source data object
        Optionaloptions: object = {}

        Additional options which are passed to field cleaning methods
    Returns object

    The cleaned source data, which is the same object as the source argument

    Inherited from Document.cleanData

Static
create

    create(
        data?:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    Create a new Document using provided input data, saving it to the database.
    Parameters
        Optionaldata:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[] = {}

        Initial data used to create this Document, or a Document instance to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the creation operation
    Returns Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    The created Document instance(s)
    See

    Document.createDocuments
    Example: Create a World-level Item

    const data = [{name: "Special Sword", type: "weapon"}];
    const created = await Item.implementation.create(data);

Example: Create an Actor-owned Item

const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});

Example: Create an Item in a Compendium pack

const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});

    Inherited from Document.create

Static
createDocuments

    createDocuments(
        data?: (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple Documents using provided input data. Data is provided as an array of objects where each individual object becomes one new Document.
    Parameters
        data: (object | Document<object, DocumentConstructionContext>)[] = []

        An array of data objects or existing Documents to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the requested creation operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    Example: Create a single Document

    const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
    const created = await Actor.implementation.createDocuments(data);

Example: Create multiple Documents

const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);

Example: Create multiple embedded Documents within a parent

const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});

Example: Create a Document within a Compendium pack

const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});

    Inherited from Document.createDocuments

Static
defineSchema

    defineSchema(): {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }

    Define the data schema for models of this type. The schema is populated the first time it is accessed and cached for future reuse.

    The schema, through its fields, provide the essential cleaning, validation, and initialization methods to turn the _source values into direct properties of the data model. The schema is a static property of the model and is reused by all instances to perform validation.

    The schemas defined by the core software in classes like foundry.documents.BaseActor are validated by the server, where user code does not run. However, almost all documents have a flags field to store data, and many have a system field that can be configured to be a foundry.abstract.TypeDataModel instance. Those models are not constructed on the server and rely purely on client-side code, which means certain extra-sensitive fields must be also be registered through your package manifest. foundry.packages.types.ServerSanitizationFields
    Returns {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }
    Example

    class SomeModel extends foundry.abstract.DataModel {
      static defineSchema() {
        return {
          foo: new foundry.data.fields.StringField()
        }
      }
    }

    class AnotherModel extends SomeModel {
      static defineSchema() {
        // Inheritance and object oriented principles apply to schema definition
        const schema = super.defineSchema()

        schema.bar = new foundry.data.fields.NumberField()

        return schema;
      }
    }

    Overrides Document.defineSchema

Static
deleteDocuments

    deleteDocuments(
        ids?: string[],
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete one or multiple existing Documents using an array of provided ids. Data is provided as an array of string ids for the documents to delete.
    Parameters
        ids: string[] = []

        An array of string ids for the documents to be deleted
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the database deletion operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    Example: Delete a single Document

    const tim = game.actors.getName("Tim");
    const deleted = await Actor.implementation.deleteDocuments([tim.id]);

Example: Delete multiple Documents

const tim = game.actors.getName("Tim");
const tom = game.actors.getName("Tom");
const deleted = await Actor.implementation.deleteDocuments([tim.id, tom.id]);

Example: Delete multiple embedded Documents within a parent

const tim = game.actors.getName("Tim");
const sword = tim.items.getName("Sword");
const shield = tim.items.getName("Shield");
const deleted = await Item.implementation.deleteDocuments([sword.id, shield.id], parent: actor});

Example: Delete Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const deleted = await Actor.implementation.deleteDocuments([actor.id], {pack: "mymodule.mypack"});

    Inherited from Document.deleteDocuments

Static
fromJSON

    fromJSON(json: string): DataModel<object, DataModelConstructionContext>

    Create a DataModel instance using a provided serialized JSON string.
    Parameters
        json: string

        Serialized document data in string format
    Returns DataModel<object, DataModelConstructionContext>

    A constructed data model instance

    Inherited from Document.fromJSON

Static
fromSource

    fromSource(
        source: object,
        context?: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions,
    ): DataModel<object, DataModelConstructionContext>

    Create a new instance of this DataModel from a source record. The source is presumed to be trustworthy and is not strictly validated.
    Parameters
        source: object

        Initial document data which comes from a trusted source.
        Optionalcontext: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions = {}

        Model construction context
    Returns DataModel<object, DataModelConstructionContext>

    Inherited from Document.fromSource

Static
get

    get(
        documentId: string,
        operation?: DatabaseGetOperation,
    ): null | Document<object, DocumentConstructionContext>

    Get a World-level Document of this type by its id.
    Parameters
        documentId: string

        The Document ID
        Optionaloperation: DatabaseGetOperation = {}

        Parameters of the get operation
    Returns null | Document<object, DocumentConstructionContext>

    The retrieved Document, or null

    Inherited from Document.get

Static
getCollectionName

    getCollectionName(name: string): null | string

    A compatibility method that returns the appropriate name of an embedded collection within this Document.
    Parameters
        name: string

        An existing collection name or a document name.
    Returns null | string

    The provided collection name if it exists, the first available collection for the document name provided, or null if no appropriate embedded collection could be found.
    Example: Passing an existing collection name.

    Actor.implementation.getCollectionName("items");
    // returns "items"

Example: Passing a document name.

Actor.implementation.getCollectionName("Item");
// returns "items"

    Inherited from Document.getCollectionName

Static
getDefaultArtwork

    getDefaultArtwork(
        actorData: ActorData,
    ): { img: string; texture: { src: string } }

    Determine default artwork based on the provided actor data.
    Parameters
        actorData: ActorData

        The source actor data.
    Returns { img: string; texture: { src: string } }

    Candidate actor image and prototype token artwork.

Static
migrateData

    migrateData(source: any): object

    Migrate candidate source data for this DataModel which may require initial cleaning or transformations.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Overrides Document.migrateData

Static
migrateDataSafe

    migrateDataSafe(source: object): object

    Wrap data migration in a try/catch which attempts it safely
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Inherited from Document.migrateDataSafe

Static
shimData

    shimData(source: any, options: any): object

    Take data which conforms to the current data schema and add backwards-compatible accessors to it in order to support older code which uses this data.
    Parameters
        source: any

        Data which matches the current schema
        options: any

        Additional shimming options
    Returns object

    Data with added backwards-compatible properties, which is the same object as the data argument

    Overrides Document.shimData

Static
updateDocuments

    updateDocuments(
        updates?: object[],
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple Document instances using provided differential data. Data is provided as an array of objects where each individual object updates one existing Document.
    Parameters
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the database update operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    Example: Update a single Document

    const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
    const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple Documents

const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple embedded Documents within a parent

const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});

Example: Update Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});

    Inherited from Document.updateDocuments

Static
validateJoint

    validateJoint(data: object): void

    Evaluate joint validation rules which apply validation conditions across multiple fields of the model. Field-specific validation rules should be defined as part of the DataSchema for the model. This method allows for testing aggregate rules which impose requirements on the overall model.
    Parameters
        data: object

        Candidate data for the model
    Returns void
    Throws

    An error if a validation failure is detected

    Inherited from Document.validateJoint

Protected
Static
_onCreateOperation

    _onCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a creation operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onCreate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User who performed the creation operation
    Returns Promise<void>

    Inherited from Document._onCreateOperation

Protected
Static
_onDeleteOperation

    _onDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a deletion operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onDelete workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were deleted
        operation: DatabaseDeleteOperation

        Parameters of the database deletion operation
        user: BaseUser

        The User who performed the deletion operation
    Returns Promise<void>

    Inherited from Document._onDeleteOperation

Protected
Static
_onUpdateOperation

    _onUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process an update operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onUpdate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User who performed the update operation
    Returns Promise<void>

    Inherited from Document._onUpdateOperation

Protected
Static
_preCreateOperation

    _preCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a creation operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preCreate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to pending documents must mutate the documents array or alter individual document instances using updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Pending document instances to be created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User requesting the creation operation
    Returns Promise<boolean | void>

    Return false to cancel the creation operation entirely

    Inherited from Document._preCreateOperation

Protected
Static
_preDeleteOperation

    _preDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a deletion operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preDelete workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested deletions are performed by mutating the operation object. updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be deleted
        operation: DatabaseDeleteOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the deletion operation
    Returns Promise<boolean | void>

    Return false to cancel the deletion operation entirely

    Inherited from Document._preDeleteOperation

Protected
Static
_preUpdateOperation

    _preUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process an update operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preUpdate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested updates are performed by mutating the data array of the operation.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the update operation
    Returns Promise<boolean | void>

    Return false to cancel the update operation entirely

    Inherited from Document._configure

    _configure(__namedParameters?: { pack?: null; parentCollection?: null }): void
    Parameters
        __namedParameters: { pack?: null; parentCollection?: null } = {}
    Returns void

    Inherited from Document._configure

_initialize

    _initialize(options: any): void

    Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
    Parameters
        options: any

        Options provided to the model constructor
    Returns void

    Overrides Document._initialize

_initializeSource

    _initializeSource(source: any, options: any): any

    Initialize the source data for a new DataModel instance. One-time migrations and initial cleaning operations are applied to the source data.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
        options: any

        Options provided to the model constructor
    Returns any

    Migrated and cleaned source data which will be stored to the model instance, which is the same object as the data argument

    Overrides Document._initializeSource

_preCreate

    _preCreate(data: any, options: any, user: any): Promise<undefined | false>

    Pre-process a creation operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.

    Modifications to the pending Document instance must be performed using updateSource.
    Parameters
        data: any

        The initial data object provided to the document creation request
        options: any

        Additional options which modify the creation request
        user: any

        The User requesting the document creation
    Returns Promise<undefined | false>

    Return false to exclude this Document from the creation operation

    Overrides Document._preCreate

_preUpdate

    _preUpdate(changed: any, options: any, user: any): Promise<undefined | false>

    Pre-process an update operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        changed: any

        The candidate changes to the Document
        options: any

        Additional options which modify the update request
        user: any

        The User requesting the document update
    Returns Promise<undefined | false>

    A return value of false indicates the update operation should be cancelled.

    Overrides Document._preUpdate

canUserModify

    canUserModify(user: BaseUser, action: string, data?: object): boolean

    Test whether a given User has permission to perform some action on this Document
    Parameters
        user: BaseUser

        The User attempting modification
        action: string

        The attempted action
        Optionaldata: object = {}

        Data involved in the attempted action
    Returns boolean

    Does the User have permission?

    Inherited from Document.canUserModify

clone

    clone(
        data?: object,
        context?: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions,
    ):
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    Clone a document, creating a new document by combining current data with provided overrides. The cloned document is ephemeral and not yet saved to the database.
    Parameters
        Optionaldata: object = {}

        Additional data which overrides current document data at the time of creation
        Optionalcontext: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions = {}

        Additional context options passed to the create method
    Returns
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    The cloned Document instance

    Inherited from Document.clone

createEmbeddedDocuments

    createEmbeddedDocuments(
        embeddedName: string,
        data?: object[],
        operation?: DatabaseCreateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple embedded Document instances within this parent Document using provided input data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        data: object[] = []

        An array of data objects used to create multiple documents
        Optionaloperation: DatabaseCreateOperation = {}

        Parameters of the database creation workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    See

    Document.createDocuments

    Inherited from Document.createEmbeddedDocuments

delete

    delete(
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Delete this Document, removing it from the database.
    Parameters
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the deletion operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The deleted Document instance, or undefined if not deleted
    See

    Document.deleteDocuments

    Inherited from Document.delete

deleteEmbeddedDocuments

    deleteEmbeddedDocuments(
        embeddedName: string,
        ids: string[],
        operation?: DatabaseDeleteOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete multiple embedded Document instances within a parent Document using provided string ids.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        ids: string[]

        An array of string ids for each Document to be deleted
        Optionaloperation: DatabaseDeleteOperation = {}

        Parameters of the database deletion workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    See

    Document.deleteDocuments

    Inherited from Document.deleteEmbeddedDocuments

getEmbeddedCollection

    getEmbeddedCollection(embeddedName: string): DocumentCollection

    Obtain a reference to the Array of source data within the data object for a certain embedded Document name
    Parameters
        embeddedName: string

        The name of the embedded Document type
    Returns DocumentCollection

    The Collection instance of embedded Documents of the requested type

    Inherited from Document.getEmbeddedCollection

getEmbeddedDocument

    getEmbeddedDocument(
        embeddedName: string,
        id: string,
        options?: { invalid?: boolean; strict?: boolean },
    ): Document<object, DocumentConstructionContext>

    Get an embedded document by its id from a named collection in the parent document.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        id: string

        The id of the child document to retrieve
        Optionaloptions: { invalid?: boolean; strict?: boolean } = {}

        Additional options which modify how embedded documents are retrieved
            Optionalinvalid?: boolean

            Allow retrieving an invalid Embedded Document.
            Optionalstrict?: boolean

            Throw an Error if the requested id does not exist. See Collection#get
    Returns Document<object, DocumentConstructionContext>

    The retrieved embedded Document instance, or undefined
    Throws

    If the embedded collection does not exist, or if strict is true and the Embedded Document could not be found.

    Inherited from Document.getEmbeddedDocument

getFlag

    getFlag(scope: string, key: string): any

    Get the value of a "flag" for this document See the setFlag method for more details on flags
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns any

    The flag value

    Inherited from Document.getFlag

getUserLevel

    getUserLevel(user?: BaseUser): DocumentOwnershipNumber

    Get the explicit permission level that a User has over this Document, a value in CONST.DOCUMENT_OWNERSHIP_LEVELS. Compendium content ignores the ownership field in favor of User role-based ownership. Otherwise, Documents use granular per-User ownership definitions and Embedded Documents defer to their parent ownership.

    This method returns the value recorded in Document ownership, regardless of the User's role, for example a GAMEMASTER user might still return a result of NONE if they are not explicitly denoted as having a level.

    To test whether a user has a certain capability over the document, testUserPermission should be used.
    Parameters
        Optionaluser: BaseUser

        The User being tested
    Returns DocumentOwnershipNumber

    A numeric permission level from CONST.DOCUMENT_OWNERSHIP_LEVELS

    Inherited from Document.getUserLevel

migrateSystemData

    migrateSystemData(): object

    For Documents which include game system data, migrate the system data object to conform to its latest data model. The data model is defined by the template.json specification included by the game system.
    Returns object

    The migrated system data object

    Inherited from Document.migrateSystemData

reset

    reset(): void

    Reset the state of this data instance back to mirror the contained source data, erasing any changes.
    Returns void

    Inherited from Document.reset

setFlag

    setFlag(
        scope: string,
        key: string,
        value: any,
    ): Promise<Document<object, DocumentConstructionContext>>

    Assign a "flag" to this document. Flags represent key-value type data which can be used to store flexible or arbitrary data required by either the core software, game systems, or user-created modules.

    Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.

    Flags set by the core software use the "core" scope. Flags set by game systems or modules should use the canonical name attribute for the module Flags set by an individual world should "world" as the scope.

    Flag values can assume almost any data type. Setting a flag value to null will delete that flag.
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
        value: any

        The flag value
    Returns Promise<Document<object, DocumentConstructionContext>>

    A Promise resolving to the updated document

    Inherited from Document.setFlag

testUserPermission

    testUserPermission(
        user: BaseUser,
        permission: DocumentOwnershipLevel,
        options?: { exact?: boolean },
    ): boolean

    Test whether a certain User has a requested permission level (or greater) over the Document
    Parameters
        user: BaseUser

        The User being tested
        permission: DocumentOwnershipLevel

        The permission level from DOCUMENT_OWNERSHIP_LEVELS to test
        options: { exact?: boolean } = {}

        Additional options involved in the permission test
            Optionalexact?: boolean

            Require the exact permission level requested?
    Returns boolean

    Does the user have this permission level over the Document?

    Inherited from Document.testUserPermission

toJSON

    toJSON(): object

    Extract the source data for the DataModel into a simple object format that can be serialized.
    Returns object

    The document source data expressed as a plain object

    Inherited from Document.toJSON

toObject

    toObject(source?: boolean): any

    Copy and transform the DataModel into a plain object. Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
    Parameters
        source: boolean = true

        Draw values from the underlying data source rather than transformed values
    Returns any

    The extracted primitive object

    Inherited from Document.toObject

traverseEmbeddedDocuments

    traverseEmbeddedDocuments(_parentPath?: string): Generator<any, void, any>

    Iterate over all embedded Documents that are hierarchical children of this Document.
    Parameters
        Optional_parentPath: string

        A parent field path already traversed
    Returns Generator<any, void, any>
    Yields

    Inherited from Document.traverseEmbeddedDocuments

unsetFlag

    unsetFlag(
        scope: string,
        key: string,
    ): Promise<Document<object, DocumentConstructionContext>>

    Remove a flag assigned to the document
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns Promise<Document<object, DocumentConstructionContext>>

    The updated document instance

    Inherited from Document.unsetFlag

update

    update(
        data?: object,
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Update this Document using incremental data, saving it to the database.
    Parameters
        Optionaldata: object = {}

        Differential update data which modifies the existing values of this document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the update operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The updated Document instance, or undefined not updated
    See

    Document.updateDocuments

    Inherited from Document.update

updateEmbeddedDocuments

    updateEmbeddedDocuments(
        embeddedName: string,
        updates?: object[],
        operation?: DatabaseUpdateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple embedded Document instances within a parent Document using provided differential data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: DatabaseUpdateOperation = {}

        Parameters of the database update workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    See

    Document.updateDocuments

    Inherited from Document.updateEmbeddedDocuments

updateSource

    updateSource(changes?: object, options?: DataModelUpdateOptions): object

    Update the DataModel locally by applying an object of changes to its source data. The provided changes are expanded, cleaned, validated, and stored to the source data object for this model. The provided changes argument is mutated in this process. The source data is then re-initialized to apply those changes to the prepared data. The method returns an object of differential changes which modified the original data.
    Parameters
        changes: object = {}

        New values which should be applied to the data model
        options: DataModelUpdateOptions = {}

        Options which determine how the new data is merged
    Returns object

    An object containing differential keys and values that were changed
    Throws

    An error if the requested data model changes were invalid

    Inherited from Document.updateSource

validate

    validate(options?: DataModelValidationOptions): boolean

    Validate the data contained in the document to check for type and content. If changes are provided, missing types are added to it before cleaning and validation. This mutates the provided changes. This function throws an error if data within the document is not valid.
    Parameters
        options: DataModelValidationOptions = {}

        Options which modify how the model is validated
    Returns boolean

    Whether the data source or proposed change is reported as valid. A boolean is always returned if validation is non-strict.
    Throws

    An error thrown if validation is strict and a failure occurs.

    Inherited from Document.validate

Protected
_onCreate

    _onCreate(data: object, options: object, userId: string): void
    Protected

    Post-process a creation operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        data: object

        The initial data object provided to the document creation request
        options: object

        Additional options which modify the creation request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onCreate

Protected
_onDelete

    _onDelete(options: object, userId: string): void
    Protected

    Post-process a deletion operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        options: object

        Additional options which modify the deletion request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onDelete

Protected
_onUpdate

    _onUpdate(changed: object, options: object, userId: string): void
    Protected

    Post-process an update operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        changed: object

        The differential data that was changed relative to the documents prior values
        options: object

        Additional options which modify the update request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onUpdate

Protected
_preDelete

    _preDelete(options: object, user: BaseUser): Promise<boolean | void>
    Protected

    Pre-process a deletion operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        options: object

        Additional options which modify the deletion request
        user: BaseUser

        The User requesting the document deletion
    Returns Promise<boolean | void>

    A return value of false indicates the deletion operation should be cancelled.

    Inherited from Document._preDelete

Static
_initializationOrder

    _initializationOrder(): Generator<any[], void, unknown>
    Returns Generator<any[], void, unknown>

    Inherited from Document._initializationOrder

Static
canUserCreate

    canUserCreate(user: any): any
    Parameters
        user: any
    Returns any

    Overrides Document.canUserCreate

Static
cleanData

    cleanData(source?: object, options?: object): object

    Clean a data source object to conform to a specific provided schema.
    Parameters
        Optionalsource: object = {}

        The source data object
        Optionaloptions: object = {}

        Additional options which are passed to field cleaning methods
    Returns object

    The cleaned source data, which is the same object as the source argument

    Inherited from Document.cleanData

Static
create

    create(
        data?:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    Create a new Document using provided input data, saving it to the database.
    Parameters
        Optionaldata:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[] = {}

        Initial data used to create this Document, or a Document instance to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the creation operation
    Returns Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    The created Document instance(s)
    See

    Document.createDocuments
    Example: Create a World-level Item

    const data = [{name: "Special Sword", type: "weapon"}];
    const created = await Item.implementation.create(data);

Example: Create an Actor-owned Item

const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});

Example: Create an Item in a Compendium pack

const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});

    Inherited from Document.create

Static
createDocuments

    createDocuments(
        data?: (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple Documents using provided input data. Data is provided as an array of objects where each individual object becomes one new Document.
    Parameters
        data: (object | Document<object, DocumentConstructionContext>)[] = []

        An array of data objects or existing Documents to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the requested creation operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    Example: Create a single Document

    const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
    const created = await Actor.implementation.createDocuments(data);

Example: Create multiple Documents

const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);

Example: Create multiple embedded Documents within a parent

const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});

Example: Create a Document within a Compendium pack

const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});

    Inherited from Document.createDocuments

Static
defineSchema

    defineSchema(): {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }

    Define the data schema for models of this type. The schema is populated the first time it is accessed and cached for future reuse.

    The schema, through its fields, provide the essential cleaning, validation, and initialization methods to turn the _source values into direct properties of the data model. The schema is a static property of the model and is reused by all instances to perform validation.

    The schemas defined by the core software in classes like foundry.documents.BaseActor are validated by the server, where user code does not run. However, almost all documents have a flags field to store data, and many have a system field that can be configured to be a foundry.abstract.TypeDataModel instance. Those models are not constructed on the server and rely purely on client-side code, which means certain extra-sensitive fields must be also be registered through your package manifest. foundry.packages.types.ServerSanitizationFields
    Returns {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }
    Example

    class SomeModel extends foundry.abstract.DataModel {
      static defineSchema() {
        return {
          foo: new foundry.data.fields.StringField()
        }
      }
    }

    class AnotherModel extends SomeModel {
      static defineSchema() {
        // Inheritance and object oriented principles apply to schema definition
        const schema = super.defineSchema()

        schema.bar = new foundry.data.fields.NumberField()

        return schema;
      }
    }

    Overrides Document.defineSchema

Static
deleteDocuments

    deleteDocuments(
        ids?: string[],
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete one or multiple existing Documents using an array of provided ids. Data is provided as an array of string ids for the documents to delete.
    Parameters
        ids: string[] = []

        An array of string ids for the documents to be deleted
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the database deletion operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    Example: Delete a single Document

    const tim = game.actors.getName("Tim");
    const deleted = await Actor.implementation.deleteDocuments([tim.id]);

Example: Delete multiple Documents

const tim = game.actors.getName("Tim");
const tom = game.actors.getName("Tom");
const deleted = await Actor.implementation.deleteDocuments([tim.id, tom.id]);

Example: Delete multiple embedded Documents within a parent

const tim = game.actors.getName("Tim");
const sword = tim.items.getName("Sword");
const shield = tim.items.getName("Shield");
const deleted = await Item.implementation.deleteDocuments([sword.id, shield.id], parent: actor});

Example: Delete Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const deleted = await Actor.implementation.deleteDocuments([actor.id], {pack: "mymodule.mypack"});

    Inherited from Document.deleteDocuments

Static
fromJSON

    fromJSON(json: string): DataModel<object, DataModelConstructionContext>

    Create a DataModel instance using a provided serialized JSON string.
    Parameters
        json: string

        Serialized document data in string format
    Returns DataModel<object, DataModelConstructionContext>

    A constructed data model instance

    Inherited from Document.fromJSON

Static
fromSource

    fromSource(
        source: object,
        context?: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions,
    ): DataModel<object, DataModelConstructionContext>

    Create a new instance of this DataModel from a source record. The source is presumed to be trustworthy and is not strictly validated.
    Parameters
        source: object

        Initial document data which comes from a trusted source.
        Optionalcontext: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions = {}

        Model construction context
    Returns DataModel<object, DataModelConstructionContext>

    Inherited from Document.fromSource

Static
get

    get(
        documentId: string,
        operation?: DatabaseGetOperation,
    ): null | Document<object, DocumentConstructionContext>

    Get a World-level Document of this type by its id.
    Parameters
        documentId: string

        The Document ID
        Optionaloperation: DatabaseGetOperation = {}

        Parameters of the get operation
    Returns null | Document<object, DocumentConstructionContext>

    The retrieved Document, or null

    Inherited from Document.get

Static
getCollectionName

    getCollectionName(name: string): null | string

    A compatibility method that returns the appropriate name of an embedded collection within this Document.
    Parameters
        name: string

        An existing collection name or a document name.
    Returns null | string

    The provided collection name if it exists, the first available collection for the document name provided, or null if no appropriate embedded collection could be found.
    Example: Passing an existing collection name.

    Actor.implementation.getCollectionName("items");
    // returns "items"

Example: Passing a document name.

Actor.implementation.getCollectionName("Item");
// returns "items"

    Inherited from Document.getCollectionName

Static
getDefaultArtwork

    getDefaultArtwork(
        actorData: ActorData,
    ): { img: string; texture: { src: string } }

    Determine default artwork based on the provided actor data.
    Parameters
        actorData: ActorData

        The source actor data.
    Returns { img: string; texture: { src: string } }

    Candidate actor image and prototype token artwork.

Static
migrateData

    migrateData(source: any): object

    Migrate candidate source data for this DataModel which may require initial cleaning or transformations.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Overrides Document.migrateData

Static
migrateDataSafe

    migrateDataSafe(source: object): object

    Wrap data migration in a try/catch which attempts it safely
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Inherited from Document.migrateDataSafe

Static
shimData

    shimData(source: any, options: any): object

    Take data which conforms to the current data schema and add backwards-compatible accessors to it in order to support older code which uses this data.
    Parameters
        source: any

        Data which matches the current schema
        options: any

        Additional shimming options
    Returns object

    Data with added backwards-compatible properties, which is the same object as the data argument

    Overrides Document.shimData

Static
updateDocuments

    updateDocuments(
        updates?: object[],
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple Document instances using provided differential data. Data is provided as an array of objects where each individual object updates one existing Document.
    Parameters
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the database update operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    Example: Update a single Document

    const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
    const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple Documents

const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple embedded Documents within a parent

const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});

Example: Update Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});

    Inherited from Document.updateDocuments

Static
validateJoint

    validateJoint(data: object): void

    Evaluate joint validation rules which apply validation conditions across multiple fields of the model. Field-specific validation rules should be defined as part of the DataSchema for the model. This method allows for testing aggregate rules which impose requirements on the overall model.
    Parameters
        data: object

        Candidate data for the model
    Returns void
    Throws

    An error if a validation failure is detected

    Inherited from Document.validateJoint

Protected
Static
_onCreateOperation

    _onCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a creation operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onCreate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User who performed the creation operation
    Returns Promise<void>

    Inherited from Document._onCreateOperation

Protected
Static
_onDeleteOperation

    _onDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a deletion operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onDelete workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were deleted
        operation: DatabaseDeleteOperation

        Parameters of the database deletion operation
        user: BaseUser

        The User who performed the deletion operation
    Returns Promise<void>

    Inherited from Document._onDeleteOperation

Protected
Static
_onUpdateOperation

    _onUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process an update operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onUpdate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User who performed the update operation
    Returns Promise<void>

    Inherited from Document._onUpdateOperation

Protected
Static
_preCreateOperation

    _preCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a creation operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preCreate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to pending documents must mutate the documents array or alter individual document instances using updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Pending document instances to be created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User requesting the creation operation
    Returns Promise<boolean | void>

    Return false to cancel the creation operation entirely

    Inherited from Document._preCreateOperation

Protected
Static
_preDeleteOperation

    _preDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a deletion operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preDelete workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested deletions are performed by mutating the operation object. updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be deleted
        operation: DatabaseDeleteOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the deletion operation
    Returns Promise<boolean | void>

    Return false to cancel the deletion operation entirely

    Inherited from Document._preDeleteOperation

Protected
Static
_preUpdateOperation

    _preUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process an update operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preUpdate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested updates are performed by mutating the data array of the operation.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the update operation
    Returns Promise<boolean | void>

    Return false to cancel the update operation entirely

    Inherited from Document._preUpdateOperation_configure

    _configure(__namedParameters?: { pack?: null; parentCollection?: null }): void
    Parameters
        __namedParameters: { pack?: null; parentCollection?: null } = {}
    Returns void

    Inherited from Document._configure

_initialize

    _initialize(options: any): void

    Initialize the instance by copying data from the source object to instance attributes. This mirrors the workflow of SchemaField#initialize but with some added functionality.
    Parameters
        options: any

        Options provided to the model constructor
    Returns void

    Overrides Document._initialize

_initializeSource

    _initializeSource(source: any, options: any): any

    Initialize the source data for a new DataModel instance. One-time migrations and initial cleaning operations are applied to the source data.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
        options: any

        Options provided to the model constructor
    Returns any

    Migrated and cleaned source data which will be stored to the model instance, which is the same object as the data argument

    Overrides Document._initializeSource

_preCreate

    _preCreate(data: any, options: any, user: any): Promise<undefined | false>

    Pre-process a creation operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.

    Modifications to the pending Document instance must be performed using updateSource.
    Parameters
        data: any

        The initial data object provided to the document creation request
        options: any

        Additional options which modify the creation request
        user: any

        The User requesting the document creation
    Returns Promise<undefined | false>

    Return false to exclude this Document from the creation operation

    Overrides Document._preCreate

_preUpdate

    _preUpdate(changed: any, options: any, user: any): Promise<undefined | false>

    Pre-process an update operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        changed: any

        The candidate changes to the Document
        options: any

        Additional options which modify the update request
        user: any

        The User requesting the document update
    Returns Promise<undefined | false>

    A return value of false indicates the update operation should be cancelled.

    Overrides Document._preUpdate

canUserModify

    canUserModify(user: BaseUser, action: string, data?: object): boolean

    Test whether a given User has permission to perform some action on this Document
    Parameters
        user: BaseUser

        The User attempting modification
        action: string

        The attempted action
        Optionaldata: object = {}

        Data involved in the attempted action
    Returns boolean

    Does the User have permission?

    Inherited from Document.canUserModify

clone

    clone(
        data?: object,
        context?: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions,
    ):
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    Clone a document, creating a new document by combining current data with provided overrides. The cloned document is ephemeral and not yet saved to the database.
    Parameters
        Optionaldata: object = {}

        Additional data which overrides current document data at the time of creation
        Optionalcontext: DataModelConstructionOptions & Pick<
            DataModelValidationOptions,
            "strict"
            | "fallback"
            | "dropInvalidEmbedded",
        > & _DocumentConstructionContext & DocumentCloneOptions = {}

        Additional context options passed to the create method
    Returns
        | Document<object, DocumentConstructionContext>
        | Promise<Document<object, DocumentConstructionContext>>

    The cloned Document instance

    Inherited from Document.clone

createEmbeddedDocuments

    createEmbeddedDocuments(
        embeddedName: string,
        data?: object[],
        operation?: DatabaseCreateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple embedded Document instances within this parent Document using provided input data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        data: object[] = []

        An array of data objects used to create multiple documents
        Optionaloperation: DatabaseCreateOperation = {}

        Parameters of the database creation workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    See

    Document.createDocuments

    Inherited from Document.createEmbeddedDocuments

delete

    delete(
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Delete this Document, removing it from the database.
    Parameters
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the deletion operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The deleted Document instance, or undefined if not deleted
    See

    Document.deleteDocuments

    Inherited from Document.delete

deleteEmbeddedDocuments

    deleteEmbeddedDocuments(
        embeddedName: string,
        ids: string[],
        operation?: DatabaseDeleteOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete multiple embedded Document instances within a parent Document using provided string ids.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        ids: string[]

        An array of string ids for each Document to be deleted
        Optionaloperation: DatabaseDeleteOperation = {}

        Parameters of the database deletion workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    See

    Document.deleteDocuments

    Inherited from Document.deleteEmbeddedDocuments

getEmbeddedCollection

    getEmbeddedCollection(embeddedName: string): DocumentCollection

    Obtain a reference to the Array of source data within the data object for a certain embedded Document name
    Parameters
        embeddedName: string

        The name of the embedded Document type
    Returns DocumentCollection

    The Collection instance of embedded Documents of the requested type

    Inherited from Document.getEmbeddedCollection

getEmbeddedDocument

    getEmbeddedDocument(
        embeddedName: string,
        id: string,
        options?: { invalid?: boolean; strict?: boolean },
    ): Document<object, DocumentConstructionContext>

    Get an embedded document by its id from a named collection in the parent document.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        id: string

        The id of the child document to retrieve
        Optionaloptions: { invalid?: boolean; strict?: boolean } = {}

        Additional options which modify how embedded documents are retrieved
            Optionalinvalid?: boolean

            Allow retrieving an invalid Embedded Document.
            Optionalstrict?: boolean

            Throw an Error if the requested id does not exist. See Collection#get
    Returns Document<object, DocumentConstructionContext>

    The retrieved embedded Document instance, or undefined
    Throws

    If the embedded collection does not exist, or if strict is true and the Embedded Document could not be found.

    Inherited from Document.getEmbeddedDocument

getFlag

    getFlag(scope: string, key: string): any

    Get the value of a "flag" for this document See the setFlag method for more details on flags
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns any

    The flag value

    Inherited from Document.getFlag

getUserLevel

    getUserLevel(user?: BaseUser): DocumentOwnershipNumber

    Get the explicit permission level that a User has over this Document, a value in CONST.DOCUMENT_OWNERSHIP_LEVELS. Compendium content ignores the ownership field in favor of User role-based ownership. Otherwise, Documents use granular per-User ownership definitions and Embedded Documents defer to their parent ownership.

    This method returns the value recorded in Document ownership, regardless of the User's role, for example a GAMEMASTER user might still return a result of NONE if they are not explicitly denoted as having a level.

    To test whether a user has a certain capability over the document, testUserPermission should be used.
    Parameters
        Optionaluser: BaseUser

        The User being tested
    Returns DocumentOwnershipNumber

    A numeric permission level from CONST.DOCUMENT_OWNERSHIP_LEVELS

    Inherited from Document.getUserLevel

migrateSystemData

    migrateSystemData(): object

    For Documents which include game system data, migrate the system data object to conform to its latest data model. The data model is defined by the template.json specification included by the game system.
    Returns object

    The migrated system data object

    Inherited from Document.migrateSystemData

reset

    reset(): void

    Reset the state of this data instance back to mirror the contained source data, erasing any changes.
    Returns void

    Inherited from Document.reset

setFlag

    setFlag(
        scope: string,
        key: string,
        value: any,
    ): Promise<Document<object, DocumentConstructionContext>>

    Assign a "flag" to this document. Flags represent key-value type data which can be used to store flexible or arbitrary data required by either the core software, game systems, or user-created modules.

    Each flag should be set using a scope which provides a namespace for the flag to help prevent collisions.

    Flags set by the core software use the "core" scope. Flags set by game systems or modules should use the canonical name attribute for the module Flags set by an individual world should "world" as the scope.

    Flag values can assume almost any data type. Setting a flag value to null will delete that flag.
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
        value: any

        The flag value
    Returns Promise<Document<object, DocumentConstructionContext>>

    A Promise resolving to the updated document

    Inherited from Document.setFlag

testUserPermission

    testUserPermission(
        user: BaseUser,
        permission: DocumentOwnershipLevel,
        options?: { exact?: boolean },
    ): boolean

    Test whether a certain User has a requested permission level (or greater) over the Document
    Parameters
        user: BaseUser

        The User being tested
        permission: DocumentOwnershipLevel

        The permission level from DOCUMENT_OWNERSHIP_LEVELS to test
        options: { exact?: boolean } = {}

        Additional options involved in the permission test
            Optionalexact?: boolean

            Require the exact permission level requested?
    Returns boolean

    Does the user have this permission level over the Document?

    Inherited from Document.testUserPermission

toJSON

    toJSON(): object

    Extract the source data for the DataModel into a simple object format that can be serialized.
    Returns object

    The document source data expressed as a plain object

    Inherited from Document.toJSON

toObject

    toObject(source?: boolean): any

    Copy and transform the DataModel into a plain object. Draw the values of the extracted object from the data source (by default) otherwise from its transformed values.
    Parameters
        source: boolean = true

        Draw values from the underlying data source rather than transformed values
    Returns any

    The extracted primitive object

    Inherited from Document.toObject

traverseEmbeddedDocuments

    traverseEmbeddedDocuments(_parentPath?: string): Generator<any, void, any>

    Iterate over all embedded Documents that are hierarchical children of this Document.
    Parameters
        Optional_parentPath: string

        A parent field path already traversed
    Returns Generator<any, void, any>
    Yields

    Inherited from Document.traverseEmbeddedDocuments

unsetFlag

    unsetFlag(
        scope: string,
        key: string,
    ): Promise<Document<object, DocumentConstructionContext>>

    Remove a flag assigned to the document
    Parameters
        scope: string

        The flag scope which namespaces the key
        key: string

        The flag key
    Returns Promise<Document<object, DocumentConstructionContext>>

    The updated document instance

    Inherited from Document.unsetFlag

update

    update(
        data?: object,
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<undefined | Document<object, DocumentConstructionContext>>

    Update this Document using incremental data, saving it to the database.
    Parameters
        Optionaldata: object = {}

        Differential update data which modifies the existing values of this document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the update operation
    Returns Promise<undefined | Document<object, DocumentConstructionContext>>

    The updated Document instance, or undefined not updated
    See

    Document.updateDocuments

    Inherited from Document.update

updateEmbeddedDocuments

    updateEmbeddedDocuments(
        embeddedName: string,
        updates?: object[],
        operation?: DatabaseUpdateOperation,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple embedded Document instances within a parent Document using provided differential data.
    Parameters
        embeddedName: string

        The name of the embedded Document type
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: DatabaseUpdateOperation = {}

        Parameters of the database update workflow
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    See

    Document.updateDocuments

    Inherited from Document.updateEmbeddedDocuments

updateSource

    updateSource(changes?: object, options?: DataModelUpdateOptions): object

    Update the DataModel locally by applying an object of changes to its source data. The provided changes are expanded, cleaned, validated, and stored to the source data object for this model. The provided changes argument is mutated in this process. The source data is then re-initialized to apply those changes to the prepared data. The method returns an object of differential changes which modified the original data.
    Parameters
        changes: object = {}

        New values which should be applied to the data model
        options: DataModelUpdateOptions = {}

        Options which determine how the new data is merged
    Returns object

    An object containing differential keys and values that were changed
    Throws

    An error if the requested data model changes were invalid

    Inherited from Document.updateSource

validate

    validate(options?: DataModelValidationOptions): boolean

    Validate the data contained in the document to check for type and content. If changes are provided, missing types are added to it before cleaning and validation. This mutates the provided changes. This function throws an error if data within the document is not valid.
    Parameters
        options: DataModelValidationOptions = {}

        Options which modify how the model is validated
    Returns boolean

    Whether the data source or proposed change is reported as valid. A boolean is always returned if validation is non-strict.
    Throws

    An error thrown if validation is strict and a failure occurs.

    Inherited from Document.validate

Protected
_onCreate

    _onCreate(data: object, options: object, userId: string): void
    Protected

    Post-process a creation operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        data: object

        The initial data object provided to the document creation request
        options: object

        Additional options which modify the creation request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onCreate

Protected
_onDelete

    _onDelete(options: object, userId: string): void
    Protected

    Post-process a deletion operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        options: object

        Additional options which modify the deletion request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onDelete

Protected
_onUpdate

    _onUpdate(changed: object, options: object, userId: string): void
    Protected

    Post-process an update operation for a single Document instance. Post-operation events occur for all connected clients.
    Parameters
        changed: object

        The differential data that was changed relative to the documents prior values
        options: object

        Additional options which modify the update request
        userId: string

        The id of the User requesting the document update
    Returns void

    Inherited from Document._onUpdate

Protected
_preDelete

    _preDelete(options: object, user: BaseUser): Promise<boolean | void>
    Protected

    Pre-process a deletion operation for a single Document instance. Pre-operation events only occur for the client which requested the operation.
    Parameters
        options: object

        Additional options which modify the deletion request
        user: BaseUser

        The User requesting the document deletion
    Returns Promise<boolean | void>

    A return value of false indicates the deletion operation should be cancelled.

    Inherited from Document._preDelete

Static
_initializationOrder

    _initializationOrder(): Generator<any[], void, unknown>
    Returns Generator<any[], void, unknown>

    Inherited from Document._initializationOrder

Static
canUserCreate

    canUserCreate(user: any): any
    Parameters
        user: any
    Returns any

    Overrides Document.canUserCreate

Static
cleanData

    cleanData(source?: object, options?: object): object

    Clean a data source object to conform to a specific provided schema.
    Parameters
        Optionalsource: object = {}

        The source data object
        Optionaloptions: object = {}

        Additional options which are passed to field cleaning methods
    Returns object

    The cleaned source data, which is the same object as the source argument

    Inherited from Document.cleanData

Static
create

    create(
        data?:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    Create a new Document using provided input data, saving it to the database.
    Parameters
        Optionaldata:
            | object
            | Document<object, DocumentConstructionContext>
            | (object | Document<object, DocumentConstructionContext>)[] = {}

        Initial data used to create this Document, or a Document instance to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the creation operation
    Returns Promise<
        | undefined
        | Document<object, DocumentConstructionContext>
        | Document<object, DocumentConstructionContext>[],
    >

    The created Document instance(s)
    See

    Document.createDocuments
    Example: Create a World-level Item

    const data = [{name: "Special Sword", type: "weapon"}];
    const created = await Item.implementation.create(data);

Example: Create an Actor-owned Item

const data = [{name: "Special Sword", type: "weapon"}];
const actor = game.actors.getName("My Hero");
const created = await Item.implementation.create(data, {parent: actor});

Example: Create an Item in a Compendium pack

const data = [{name: "Special Sword", type: "weapon"}];
const created = await Item.implementation.create(data, {pack: "mymodule.mypack"});

    Inherited from Document.create

Static
createDocuments

    createDocuments(
        data?: (object | Document<object, DocumentConstructionContext>)[],
        operation?: Partial<Omit<DatabaseCreateOperation, "data">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Create multiple Documents using provided input data. Data is provided as an array of objects where each individual object becomes one new Document.
    Parameters
        data: (object | Document<object, DocumentConstructionContext>)[] = []

        An array of data objects or existing Documents to persist.
        Optionaloperation: Partial<Omit<DatabaseCreateOperation, "data">> = {}

        Parameters of the requested creation operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of created Document instances
    Example: Create a single Document

    const data = [{name: "New Actor", type: "character", img: "path/to/profile.jpg"}];
    const created = await Actor.implementation.createDocuments(data);

Example: Create multiple Documents

const data = [{name: "Tim", type: "npc"], [{name: "Tom", type: "npc"}];
const created = await Actor.implementation.createDocuments(data);

Example: Create multiple embedded Documents within a parent

const actor = game.actors.getName("Tim");
const data = [{name: "Sword", type: "weapon"}, {name: "Breastplate", type: "equipment"}];
const created = await Item.implementation.createDocuments(data, {parent: actor});

Example: Create a Document within a Compendium pack

const data = [{name: "Compendium Actor", type: "character", img: "path/to/profile.jpg"}];
const created = await Actor.implementation.createDocuments(data, {pack: "mymodule.mypack"});

    Inherited from Document.createDocuments

Static
defineSchema

    defineSchema(): {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }

    Define the data schema for models of this type. The schema is populated the first time it is accessed and cached for future reuse.

    The schema, through its fields, provide the essential cleaning, validation, and initialization methods to turn the _source values into direct properties of the data model. The schema is a static property of the model and is reused by all instances to perform validation.

    The schemas defined by the core software in classes like foundry.documents.BaseActor are validated by the server, where user code does not run. However, almost all documents have a flags field to store data, and many have a system field that can be configured to be a foundry.abstract.TypeDataModel instance. Those models are not constructed on the server and rely purely on client-side code, which means certain extra-sensitive fields must be also be registered through your package manifest. foundry.packages.types.ServerSanitizationFields
    Returns {
        _id: DocumentIdField;
        _stats: DocumentStatsField;
        effects: EmbeddedCollectionField;
        flags: DocumentFlagsField;
        folder: ForeignDocumentField;
        img: FilePathField;
        items: EmbeddedCollectionField;
        name: StringField;
        ownership: DocumentOwnershipField;
        prototypeToken: EmbeddedDataField;
        sort: IntegerSortField;
        system: TypeDataField;
        type: DocumentTypeField;
    }
    Example

    class SomeModel extends foundry.abstract.DataModel {
      static defineSchema() {
        return {
          foo: new foundry.data.fields.StringField()
        }
      }
    }

    class AnotherModel extends SomeModel {
      static defineSchema() {
        // Inheritance and object oriented principles apply to schema definition
        const schema = super.defineSchema()

        schema.bar = new foundry.data.fields.NumberField()

        return schema;
      }
    }

    Overrides Document.defineSchema

Static
deleteDocuments

    deleteDocuments(
        ids?: string[],
        operation?: Partial<Omit<DatabaseDeleteOperation, "ids">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Delete one or multiple existing Documents using an array of provided ids. Data is provided as an array of string ids for the documents to delete.
    Parameters
        ids: string[] = []

        An array of string ids for the documents to be deleted
        Optionaloperation: Partial<Omit<DatabaseDeleteOperation, "ids">> = {}

        Parameters of the database deletion operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of deleted Document instances
    Example: Delete a single Document

    const tim = game.actors.getName("Tim");
    const deleted = await Actor.implementation.deleteDocuments([tim.id]);

Example: Delete multiple Documents

const tim = game.actors.getName("Tim");
const tom = game.actors.getName("Tom");
const deleted = await Actor.implementation.deleteDocuments([tim.id, tom.id]);

Example: Delete multiple embedded Documents within a parent

const tim = game.actors.getName("Tim");
const sword = tim.items.getName("Sword");
const shield = tim.items.getName("Shield");
const deleted = await Item.implementation.deleteDocuments([sword.id, shield.id], parent: actor});

Example: Delete Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const deleted = await Actor.implementation.deleteDocuments([actor.id], {pack: "mymodule.mypack"});

    Inherited from Document.deleteDocuments

Static
fromJSON

    fromJSON(json: string): DataModel<object, DataModelConstructionContext>

    Create a DataModel instance using a provided serialized JSON string.
    Parameters
        json: string

        Serialized document data in string format
    Returns DataModel<object, DataModelConstructionContext>

    A constructed data model instance

    Inherited from Document.fromJSON

Static
fromSource

    fromSource(
        source: object,
        context?: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions,
    ): DataModel<object, DataModelConstructionContext>

    Create a new instance of this DataModel from a source record. The source is presumed to be trustworthy and is not strictly validated.
    Parameters
        source: object

        Initial document data which comes from a trusted source.
        Optionalcontext: Omit<DataModelConstructionContext, "strict"> & DataModelFromSourceOptions = {}

        Model construction context
    Returns DataModel<object, DataModelConstructionContext>

    Inherited from Document.fromSource

Static
get

    get(
        documentId: string,
        operation?: DatabaseGetOperation,
    ): null | Document<object, DocumentConstructionContext>

    Get a World-level Document of this type by its id.
    Parameters
        documentId: string

        The Document ID
        Optionaloperation: DatabaseGetOperation = {}

        Parameters of the get operation
    Returns null | Document<object, DocumentConstructionContext>

    The retrieved Document, or null

    Inherited from Document.get

Static
getCollectionName

    getCollectionName(name: string): null | string

    A compatibility method that returns the appropriate name of an embedded collection within this Document.
    Parameters
        name: string

        An existing collection name or a document name.
    Returns null | string

    The provided collection name if it exists, the first available collection for the document name provided, or null if no appropriate embedded collection could be found.
    Example: Passing an existing collection name.

    Actor.implementation.getCollectionName("items");
    // returns "items"

Example: Passing a document name.

Actor.implementation.getCollectionName("Item");
// returns "items"

    Inherited from Document.getCollectionName

Static
getDefaultArtwork

    getDefaultArtwork(
        actorData: ActorData,
    ): { img: string; texture: { src: string } }

    Determine default artwork based on the provided actor data.
    Parameters
        actorData: ActorData

        The source actor data.
    Returns { img: string; texture: { src: string } }

    Candidate actor image and prototype token artwork.

Static
migrateData

    migrateData(source: any): object

    Migrate candidate source data for this DataModel which may require initial cleaning or transformations.
    Parameters
        source: any

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Overrides Document.migrateData

Static
migrateDataSafe

    migrateDataSafe(source: object): object

    Wrap data migration in a try/catch which attempts it safely
    Parameters
        source: object

        The candidate source data from which the model will be constructed
    Returns object

    Migrated source data, which is the same object as the source argument

    Inherited from Document.migrateDataSafe

Static
shimData

    shimData(source: any, options: any): object

    Take data which conforms to the current data schema and add backwards-compatible accessors to it in order to support older code which uses this data.
    Parameters
        source: any

        Data which matches the current schema
        options: any

        Additional shimming options
    Returns object

    Data with added backwards-compatible properties, which is the same object as the data argument

    Overrides Document.shimData

Static
updateDocuments

    updateDocuments(
        updates?: object[],
        operation?: Partial<Omit<DatabaseUpdateOperation, "updates">>,
    ): Promise<Document<object, DocumentConstructionContext>[]>

    Update multiple Document instances using provided differential data. Data is provided as an array of objects where each individual object updates one existing Document.
    Parameters
        updates: object[] = []

        An array of differential data objects, each used to update a single Document
        Optionaloperation: Partial<Omit<DatabaseUpdateOperation, "updates">> = {}

        Parameters of the database update operation
    Returns Promise<Document<object, DocumentConstructionContext>[]>

    An array of updated Document instances
    Example: Update a single Document

    const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}];
    const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple Documents

const updates = [{_id: "12ekjf43kj2312ds", name: "Timothy"}, {_id: "kj549dk48k34jk34", name: "Thomas"}]};
const updated = await Actor.implementation.updateDocuments(updates);

Example: Update multiple embedded Documents within a parent

const actor = game.actors.getName("Timothy");
const updates = [{_id: sword.id, name: "Magic Sword"}, {_id: shield.id, name: "Magic Shield"}];
const updated = await Item.implementation.updateDocuments(updates, {parent: actor});

Example: Update Documents within a Compendium pack

const actor = await pack.getDocument(documentId);
const updated = await Actor.implementation.updateDocuments([{_id: actor.id, name: "New Name"}],
  {pack: "mymodule.mypack"});

    Inherited from Document.updateDocuments

Static
validateJoint

    validateJoint(data: object): void

    Evaluate joint validation rules which apply validation conditions across multiple fields of the model. Field-specific validation rules should be defined as part of the DataSchema for the model. This method allows for testing aggregate rules which impose requirements on the overall model.
    Parameters
        data: object

        Candidate data for the model
    Returns void
    Throws

    An error if a validation failure is detected

    Inherited from Document.validateJoint

Protected
Static
_onCreateOperation

    _onCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a creation operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onCreate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User who performed the creation operation
    Returns Promise<void>

    Inherited from Document._onCreateOperation

Protected
Static
_onDeleteOperation

    _onDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process a deletion operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onDelete workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were deleted
        operation: DatabaseDeleteOperation

        Parameters of the database deletion operation
        user: BaseUser

        The User who performed the deletion operation
    Returns Promise<void>

    Inherited from Document._onDeleteOperation

Protected
Static
_onUpdateOperation

    _onUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<void>
    Protected

    Post-process an update operation, reacting to database changes which have occurred. Post-operation events occur for all connected clients.

    This batch-wise workflow occurs after individual _onUpdate workflows.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        The Document instances which were updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User who performed the update operation
    Returns Promise<void>

    Inherited from Document._onUpdateOperation

Protected
Static
_preCreateOperation

    _preCreateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseCreateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a creation operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preCreate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to pending documents must mutate the documents array or alter individual document instances using updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Pending document instances to be created
        operation: DatabaseCreateOperation

        Parameters of the database creation operation
        user: BaseUser

        The User requesting the creation operation
    Returns Promise<boolean | void>

    Return false to cancel the creation operation entirely

    Inherited from Document._preCreateOperation

Protected
Static
_preDeleteOperation

    _preDeleteOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseDeleteOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process a deletion operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preDelete workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested deletions are performed by mutating the operation object. updateSource.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be deleted
        operation: DatabaseDeleteOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the deletion operation
    Returns Promise<boolean | void>

    Return false to cancel the deletion operation entirely

    Inherited from Document._preDeleteOperation

Protected
Static
_preUpdateOperation

    _preUpdateOperation(
        documents: Document<object, DocumentConstructionContext>[],
        operation: DatabaseUpdateOperation,
        user: BaseUser,
    ): Promise<boolean | void>
    Protected

    Pre-process an update operation, potentially altering its instructions or input data. Pre-operation events only occur for the client which requested the operation.

    This batch-wise workflow occurs after individual _preUpdate workflows and provides a final pre-flight check before a database operation occurs.

    Modifications to the requested updates are performed by mutating the data array of the operation.
    Parameters
        documents: Document<object, DocumentConstructionContext>[]

        Document instances to be updated
        operation: DatabaseUpdateOperation

        Parameters of the database update operation
        user: BaseUser

        The User requesting the update operation
    Returns Promise<boolean | void>

    Return false to cancel the update operation entirely

    Inherited from Document._preUpdateOperation